// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LambdaInternalPingGet(params *LambdaInternalPingGetParams, opts ...ClientOption) (*LambdaInternalPingGetOK, error)

	LambdaInternalProfileStartupGet(params *LambdaInternalProfileStartupGetParams, opts ...ClientOption) (*LambdaInternalProfileStartupGetOK, error)

	LambdaInternalSysinfoDownloadGet(params *LambdaInternalSysinfoDownloadGetParams, opts ...ClientOption) (*LambdaInternalSysinfoDownloadGetOK, error)

	AddCustomTagInfiniteImageBrowsingDbAddCustomTagPost(params *AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostParams, opts ...ClientOption) (*AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostOK, error)

	APICategoryMaskSamCategoryMaskPost(params *APICategoryMaskSamCategoryMaskPostParams, opts ...ClientOption) (*APICategoryMaskSamCategoryMaskPostOK, error)

	APIControlnetSegSamControlnetSegPost(params *APIControlnetSegSamControlnetSegPostParams, opts ...ClientOption) (*APIControlnetSegSamControlnetSegPostOK, error)

	APIDilateMaskSamDilateMaskPost(params *APIDilateMaskSamDilateMaskPostParams, opts ...ClientOption) (*APIDilateMaskSamDilateMaskPostOK, error)

	APIDinoPredictSamDinoPredictPost(params *APIDinoPredictSamDinoPredictPostParams, opts ...ClientOption) (*APIDinoPredictSamDinoPredictPostOK, error)

	APIInfoInfoGet(params *APIInfoInfoGetParams, opts ...ClientOption) (*APIInfoInfoGetOK, error)

	APISamModelSamSamModelGet(params *APISamModelSamSamModelGetParams, opts ...ClientOption) (*APISamModelSamSamModelGetOK, error)

	APISamPredictSamSamPredictPost(params *APISamPredictSamSamPredictPostParams, opts ...ClientOption) (*APISamPredictSamSamPredictPostOK, error)

	APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGet(params *APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetParams, opts ...ClientOption) (*APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetOK, error)

	APISetSendImgPathInfiniteImageBrowsingSendImgPathPost(params *APISetSendImgPathInfiniteImageBrowsingSendImgPathPostParams, opts ...ClientOption) (*APISetSendImgPathInfiniteImageBrowsingSendImgPathPostOK, error)

	AppIDAppIDGet(params *AppIDAppIDGetParams, opts ...ClientOption) (*AppIDAppIDGetOK, error)

	BuildResourceAssetsPathGet(params *BuildResourceAssetsPathGetParams, opts ...ClientOption) (*BuildResourceAssetsPathGetOK, error)

	CheckPathExistsInfiniteImageBrowsingCheckPathExistsPost(params *CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostParams, opts ...ClientOption) (*CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostOK, error)

	CopyFilesInfiniteImageBrowsingCopyFilesPost(params *CopyFilesInfiniteImageBrowsingCopyFilesPostParams, opts ...ClientOption) (*CopyFilesInfiniteImageBrowsingCopyFilesPostOK, error)

	CreateEmbeddingSdapiV1CreateEmbeddingPost(params *CreateEmbeddingSdapiV1CreateEmbeddingPostParams, opts ...ClientOption) (*CreateEmbeddingSdapiV1CreateEmbeddingPostOK, error)

	CreateFoldersInfiniteImageBrowsingMkdirsPost(params *CreateFoldersInfiniteImageBrowsingMkdirsPostParams, opts ...ClientOption) (*CreateFoldersInfiniteImageBrowsingMkdirsPostOK, error)

	CreateHypernetworkSdapiV1CreateHypernetworkPost(params *CreateHypernetworkSdapiV1CreateHypernetworkPostParams, opts ...ClientOption) (*CreateHypernetworkSdapiV1CreateHypernetworkPostOK, error)

	CreateScannedPathInfiniteImageBrowsingDbScannedPathsPost(params *CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostParams, opts ...ClientOption) (*CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostCreated, error)

	DeleteFilesInfiniteImageBrowsingDeleteFilesPost(params *DeleteFilesInfiniteImageBrowsingDeleteFilesPostParams, opts ...ClientOption) (*DeleteFilesInfiniteImageBrowsingDeleteFilesPostOK, error)

	DeoldifyImageDeoldifyImagePost(params *DeoldifyImageDeoldifyImagePostParams, opts ...ClientOption) (*DeoldifyImageDeoldifyImagePostOK, error)

	DetectControlnetDetectPost(params *DetectControlnetDetectPostParams, opts ...ClientOption) (*DetectControlnetDetectPostOK, error)

	ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPost(params *ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostParams, opts ...ClientOption) (*ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostOK, error)

	ExtrasSingleImageAPISdapiV1ExtraSingleImagePost(params *ExtrasSingleImageAPISdapiV1ExtraSingleImagePostParams, opts ...ClientOption) (*ExtrasSingleImageAPISdapiV1ExtraSingleImagePostOK, error)

	FaviconFaviconIcoGet(params *FaviconFaviconIcoGetParams, opts ...ClientOption) (*FaviconFaviconIcoGetOK, error)

	FetchFileSdExtraNetworksThumbGet(params *FetchFileSdExtraNetworksThumbGetParams, opts ...ClientOption) (*FetchFileSdExtraNetworksThumbGetOK, error)

	FileDeprecatedFilePathGet(params *FileDeprecatedFilePathGetParams, opts ...ClientOption) (*FileDeprecatedFilePathGetOK, error)

	FileFilePathOrURLGet(params *FileFilePathOrURLGetParams, opts ...ClientOption) (*FileFilePathOrURLGetOK, error)

	FileFilePathOrURLHead(params *FileFilePathOrURLHeadParams, opts ...ClientOption) (*FileFilePathOrURLHeadOK, error)

	GetCmdFlagsSdapiV1CmdFlagsGet(params *GetCmdFlagsSdapiV1CmdFlagsGetParams, opts ...ClientOption) (*GetCmdFlagsSdapiV1CmdFlagsGetOK, error)

	GetConfigConfigGet(params *GetConfigConfigGetParams, opts ...ClientOption) (*GetConfigConfigGetOK, error)

	GetConfigSdapiV1OptionsGet(params *GetConfigSdapiV1OptionsGetParams, opts ...ClientOption) (*GetConfigSdapiV1OptionsGetOK, error)

	GetCurrentUserUserGet(params *GetCurrentUserUserGetParams, opts ...ClientOption) (*GetCurrentUserUserGetOK, error)

	GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGet(params *GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetParams, opts ...ClientOption) (*GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetOK, error)

	GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGet(params *GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetParams, opts ...ClientOption) (*GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetOK, error)

	GetEmbeddingsSdapiV1EmbeddingsGet(params *GetEmbeddingsSdapiV1EmbeddingsGetParams, opts ...ClientOption) (*GetEmbeddingsSdapiV1EmbeddingsGetOK, error)

	GetFaceRestorersSdapiV1FaceRestorersGet(params *GetFaceRestorersSdapiV1FaceRestorersGetParams, opts ...ClientOption) (*GetFaceRestorersSdapiV1FaceRestorersGetOK, error)

	GetFileInfiniteImageBrowsingFileGet(params *GetFileInfiniteImageBrowsingFileGetParams, opts ...ClientOption) (*GetFileInfiniteImageBrowsingFileGetOK, error)

	GetHypernetworksSdapiV1HypernetworksGet(params *GetHypernetworksSdapiV1HypernetworksGetParams, opts ...ClientOption) (*GetHypernetworksSdapiV1HypernetworksGetOK, error)

	GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGet(params *GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetParams, opts ...ClientOption) (*GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetOK, error)

	GetImgTagsInfiniteImageBrowsingDbGetImageTagsPost(params *GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostParams, opts ...ClientOption) (*GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostOK, error)

	GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(params *GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetParams, opts ...ClientOption) (*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetOK, error)

	GetLorasSdapiV1LorasGet(params *GetLorasSdapiV1LorasGetParams, opts ...ClientOption) (*GetLorasSdapiV1LorasGetOK, error)

	GetLycosSdapiV1LycosGet(params *GetLycosSdapiV1LycosGetParams, opts ...ClientOption) (*GetLycosSdapiV1LycosGetOK, error)

	GetMemorySdapiV1MemoryGet(params *GetMemorySdapiV1MemoryGetParams, opts ...ClientOption) (*GetMemorySdapiV1MemoryGetOK, error)

	GetMetadataSdExtraNetworksMetadataGet(params *GetMetadataSdExtraNetworksMetadataGetParams, opts ...ClientOption) (*GetMetadataSdExtraNetworksMetadataGetOK, error)

	GetPromptStylesSdapiV1PromptStylesGet(params *GetPromptStylesSdapiV1PromptStylesGetParams, opts ...ClientOption) (*GetPromptStylesSdapiV1PromptStylesGetOK, error)

	GetQueueStatusQueueStatusGet(params *GetQueueStatusQueueStatusGetParams, opts ...ClientOption) (*GetQueueStatusQueueStatusGetOK, error)

	GetRealesrganModelsSdapiV1RealesrganModelsGet(params *GetRealesrganModelsSdapiV1RealesrganModelsGetParams, opts ...ClientOption) (*GetRealesrganModelsSdapiV1RealesrganModelsGetOK, error)

	GetSamplersSdapiV1SamplersGet(params *GetSamplersSdapiV1SamplersGetParams, opts ...ClientOption) (*GetSamplersSdapiV1SamplersGetOK, error)

	GetScriptInfoSdapiV1ScriptInfoGet(params *GetScriptInfoSdapiV1ScriptInfoGetParams, opts ...ClientOption) (*GetScriptInfoSdapiV1ScriptInfoGetOK, error)

	GetScriptsListSdapiV1ScriptsGet(params *GetScriptsListSdapiV1ScriptsGetParams, opts ...ClientOption) (*GetScriptsListSdapiV1ScriptsGetOK, error)

	GetSdModelsSdapiV1SdModelsGet(params *GetSdModelsSdapiV1SdModelsGetParams, opts ...ClientOption) (*GetSdModelsSdapiV1SdModelsGetOK, error)

	GetSdVaesSdapiV1SdVaeGet(params *GetSdVaesSdapiV1SdVaeGetParams, opts ...ClientOption) (*GetSdVaesSdapiV1SdVaeGetOK, error)

	GetSingleCardSdExtraNetworksGetSingleCardGet(params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, opts ...ClientOption) (*GetSingleCardSdExtraNetworksGetSingleCardGetOK, error)

	GetTargetFloderFilesInfiniteImageBrowsingFilesGet(params *GetTargetFloderFilesInfiniteImageBrowsingFilesGetParams, opts ...ClientOption) (*GetTargetFloderFilesInfiniteImageBrowsingFilesGetOK, error)

	GetTokenTokenGet(params *GetTokenTokenGetParams, opts ...ClientOption) (*GetTokenTokenGetOK, error)

	GetUpscalersSdapiV1UpscalersGet(params *GetUpscalersSdapiV1UpscalersGetParams, opts ...ClientOption) (*GetUpscalersSdapiV1UpscalersGetOK, error)

	GlobalSettingInfiniteImageBrowsingGlobalSettingGet(params *GlobalSettingInfiniteImageBrowsingGlobalSettingGetParams, opts ...ClientOption) (*GlobalSettingInfiniteImageBrowsingGlobalSettingGetOK, error)

	GreetingInfiniteImageBrowsingHelloGet(params *GreetingInfiniteImageBrowsingHelloGetParams, opts ...ClientOption) (*GreetingInfiniteImageBrowsingHelloGetOK, error)

	HeartbeatSamHeartbeatGet(params *HeartbeatSamHeartbeatGetParams, opts ...ClientOption) (*HeartbeatSamHeartbeatGetOK, error)

	ImageGeninfoInfiniteImageBrowsingImageGeninfoGet(params *ImageGeninfoInfiniteImageBrowsingImageGeninfoGetParams, opts ...ClientOption) (*ImageGeninfoInfiniteImageBrowsingImageGeninfoGetOK, error)

	Img2imgapiSdapiV1Img2imgPost(params *Img2imgapiSdapiV1Img2imgPostParams, opts ...ClientOption) (*Img2imgapiSdapiV1Img2imgPostOK, error)

	IndexBdInfiniteImageBrowsingGet(params *IndexBdInfiniteImageBrowsingGetParams, opts ...ClientOption) (*IndexBdInfiniteImageBrowsingGetOK, error)

	InterrogateapiSdapiV1InterrogatePost(params *InterrogateapiSdapiV1InterrogatePostParams, opts ...ClientOption) (*InterrogateapiSdapiV1InterrogatePostOK, error)

	InterruptapiSdapiV1InterruptPost(params *InterruptapiSdapiV1InterruptPostParams, opts ...ClientOption) (*InterruptapiSdapiV1InterruptPostOK, error)

	LoginCheckLoginCheckGet(params *LoginCheckLoginCheckGetParams, opts ...ClientOption) (*LoginCheckLoginCheckGetOK, error)

	LoginLoginPost(params *LoginLoginPostParams, opts ...ClientOption) (*LoginLoginPostOK, error)

	MainGet(params *MainGetParams, opts ...ClientOption) (*MainGetOK, error)

	MainHead(params *MainHeadParams, opts ...ClientOption) (*MainHeadOK, error)

	MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPost(params *MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostParams, opts ...ClientOption) (*MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostOK, error)

	ModelListControlnetModelListGet(params *ModelListControlnetModelListGetParams, opts ...ClientOption) (*ModelListControlnetModelListGetOK, error)

	ModuleListControlnetModuleListGet(params *ModuleListControlnetModuleListGetParams, opts ...ClientOption) (*ModuleListControlnetModuleListGetOK, error)

	MoveFilesInfiniteImageBrowsingMoveFilesPost(params *MoveFilesInfiniteImageBrowsingMoveFilesPostParams, opts ...ClientOption) (*MoveFilesInfiniteImageBrowsingMoveFilesPostOK, error)

	OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPost(params *OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostParams, opts ...ClientOption) (*OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostOK, error)

	PnginfoapiSdapiV1PngInfoPost(params *PnginfoapiSdapiV1PngInfoPostParams, opts ...ClientOption) (*PnginfoapiSdapiV1PngInfoPostOK, error)

	PredictAPIAPINamePost(params *PredictAPIAPINamePostParams, opts ...ClientOption) (*PredictAPIAPINamePostOK, error)

	PredictOcrPredictPost(params *PredictOcrPredictPostParams, opts ...ClientOption) (*PredictOcrPredictPostOK, error)

	PredictRunAPINamePost(params *PredictRunAPINamePostParams, opts ...ClientOption) (*PredictRunAPINamePostOK, error)

	PreprocessSdapiV1PreprocessPost(params *PreprocessSdapiV1PreprocessPostParams, opts ...ClientOption) (*PreprocessSdapiV1PreprocessPostOK, error)

	ProgressapiInternalProgressPost(params *ProgressapiInternalProgressPostParams, opts ...ClientOption) (*ProgressapiInternalProgressPostOK, error)

	ProgressapiSdapiV1ProgressGet(params *ProgressapiSdapiV1ProgressGetParams, opts ...ClientOption) (*ProgressapiSdapiV1ProgressGetOK, error)

	QuicksettingsHintInternalQuicksettingsHintGet(params *QuicksettingsHintInternalQuicksettingsHintGetParams, opts ...ClientOption) (*QuicksettingsHintInternalQuicksettingsHintGetOK, error)

	ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGet(params *ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetParams, opts ...ClientOption) (*ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetOK, error)

	RefreshCheckpointsSdapiV1RefreshCheckpointsPost(params *RefreshCheckpointsSdapiV1RefreshCheckpointsPostParams, opts ...ClientOption) (*RefreshCheckpointsSdapiV1RefreshCheckpointsPostOK, error)

	RefreshLorasSdapiV1RefreshLorasPost(params *RefreshLorasSdapiV1RefreshLorasPostParams, opts ...ClientOption) (*RefreshLorasSdapiV1RefreshLorasPostOK, error)

	RefreshLycosSdapiV1RefreshLycosPost(params *RefreshLycosSdapiV1RefreshLycosPostParams, opts ...ClientOption) (*RefreshLycosSdapiV1RefreshLycosPostOK, error)

	ReloadapiSdapiV1ReloadCheckpointPost(params *ReloadapiSdapiV1ReloadCheckpointPostParams, opts ...ClientOption) (*ReloadapiSdapiV1ReloadCheckpointPostOK, error)

	RembgRemoveRembgPost(params *RembgRemoveRembgPostParams, opts ...ClientOption) (*RembgRemoveRembgPostOK, error)

	RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPost(params *RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostParams, opts ...ClientOption) (*RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostOK, error)

	RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPost(params *RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostParams, opts ...ClientOption) (*RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostOK, error)

	ResetIteratorResetPost(params *ResetIteratorResetPostParams, opts ...ClientOption) (*ResetIteratorResetPostOK, error)

	ReverseProxyProxyURLPathGet(params *ReverseProxyProxyURLPathGetParams, opts ...ClientOption) (*ReverseProxyProxyURLPathGetOK, error)

	ReverseProxyProxyURLPathHead(params *ReverseProxyProxyURLPathHeadParams, opts ...ClientOption) (*ReverseProxyProxyURLPathHeadOK, error)

	RobotsTxtRobotsTxtGet(params *RobotsTxtRobotsTxtGetParams, opts ...ClientOption) (*RobotsTxtRobotsTxtGetOK, error)

	RoopImageRoopImagePost(params *RoopImageRoopImagePostParams, opts ...ClientOption) (*RoopImageRoopImagePostOK, error)

	RoopModelsRoopModelsGet(params *RoopModelsRoopModelsGetParams, opts ...ClientOption) (*RoopModelsRoopModelsGetOK, error)

	SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGet(params *SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetParams, opts ...ClientOption) (*SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetOK, error)

	SetConfigSdapiV1OptionsPost(params *SetConfigSdapiV1OptionsPostParams, opts ...ClientOption) (*SetConfigSdapiV1OptionsPostOK, error)

	SettingsControlnetSettingsGet(params *SettingsControlnetSettingsGetParams, opts ...ClientOption) (*SettingsControlnetSettingsGetOK, error)

	ShutdownAppInfiniteImageBrowsingShutdownPost(params *ShutdownAppInfiniteImageBrowsingShutdownPostParams, opts ...ClientOption) (*ShutdownAppInfiniteImageBrowsingShutdownPostOK, error)

	SkipSdapiV1SkipPost(params *SkipSdapiV1SkipPostParams, opts ...ClientOption) (*SkipSdapiV1SkipPostOK, error)

	StartupEventsStartupEventsGet(params *StartupEventsStartupEventsGetParams, opts ...ClientOption) (*StartupEventsStartupEventsGetOK, error)

	StaticResourceStaticPathGet(params *StaticResourceStaticPathGetParams, opts ...ClientOption) (*StaticResourceStaticPathGetOK, error)

	T2vAPIVersionT2vAPIVersionGet(params *T2vAPIVersionT2vAPIVersionGetParams, opts ...ClientOption) (*T2vAPIVersionT2vAPIVersionGetOK, error)

	T2vVersionT2vVersionGet(params *T2vVersionT2vVersionGetParams, opts ...ClientOption) (*T2vVersionT2vVersionGetOK, error)

	Text2imgapiSdapiV1Txt2imgPost(params *Text2imgapiSdapiV1Txt2imgPostParams, opts ...ClientOption) (*Text2imgapiSdapiV1Txt2imgPostOK, error)

	ThemeCSSThemeCSSGet(params *ThemeCSSThemeCSSGetParams, opts ...ClientOption) (*ThemeCSSThemeCSSGetOK, error)

	ThumbnailInfiniteImageBrowsingImageThumbnailGet(params *ThumbnailInfiniteImageBrowsingImageThumbnailGetParams, opts ...ClientOption) (*ThumbnailInfiniteImageBrowsingImageThumbnailGetOK, error)

	ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPost(params *ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostParams, opts ...ClientOption) (*ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostOK, error)

	TrainEmbeddingSdapiV1TrainEmbeddingPost(params *TrainEmbeddingSdapiV1TrainEmbeddingPostParams, opts ...ClientOption) (*TrainEmbeddingSdapiV1TrainEmbeddingPostOK, error)

	TrainHypernetworkSdapiV1TrainHypernetworkPost(params *TrainHypernetworkSdapiV1TrainHypernetworkPostParams, opts ...ClientOption) (*TrainHypernetworkSdapiV1TrainHypernetworkPostOK, error)

	UnloadapiSdapiV1UnloadCheckpointPost(params *UnloadapiSdapiV1UnloadCheckpointPostParams, opts ...ClientOption) (*UnloadapiSdapiV1UnloadCheckpointPostOK, error)

	UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPost(params *UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostParams, opts ...ClientOption) (*UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostOK, error)

	VersionControlnetVersionGet(params *VersionControlnetVersionGetParams, opts ...ClientOption) (*VersionControlnetVersionGetOK, error)

	ZipFilesInfiniteImageBrowsingZipPost(params *ZipFilesInfiniteImageBrowsingZipPostParams, opts ...ClientOption) (*ZipFilesInfiniteImageBrowsingZipPostOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LambdaInternalPingGet lambdas
*/
func (a *Client) LambdaInternalPingGet(params *LambdaInternalPingGetParams, opts ...ClientOption) (*LambdaInternalPingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLambdaInternalPingGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "_lambda__internal_ping_get",
		Method:             "GET",
		PathPattern:        "/internal/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LambdaInternalPingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LambdaInternalPingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for _lambda__internal_ping_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LambdaInternalProfileStartupGet lambdas
*/
func (a *Client) LambdaInternalProfileStartupGet(params *LambdaInternalProfileStartupGetParams, opts ...ClientOption) (*LambdaInternalProfileStartupGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLambdaInternalProfileStartupGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "_lambda__internal_profile_startup_get",
		Method:             "GET",
		PathPattern:        "/internal/profile-startup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LambdaInternalProfileStartupGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LambdaInternalProfileStartupGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for _lambda__internal_profile_startup_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LambdaInternalSysinfoDownloadGet lambdas
*/
func (a *Client) LambdaInternalSysinfoDownloadGet(params *LambdaInternalSysinfoDownloadGetParams, opts ...ClientOption) (*LambdaInternalSysinfoDownloadGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLambdaInternalSysinfoDownloadGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "_lambda__internal_sysinfo_download_get",
		Method:             "GET",
		PathPattern:        "/internal/sysinfo-download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LambdaInternalSysinfoDownloadGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LambdaInternalSysinfoDownloadGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for _lambda__internal_sysinfo_download_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddCustomTagInfiniteImageBrowsingDbAddCustomTagPost adds custom tag
*/
func (a *Client) AddCustomTagInfiniteImageBrowsingDbAddCustomTagPost(params *AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostParams, opts ...ClientOption) (*AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddCustomTagInfiniteImageBrowsingDbAddCustomTagPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "add_custom_tag_infinite_image_browsing_db_add_custom_tag_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/add_custom_tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddCustomTagInfiniteImageBrowsingDbAddCustomTagPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for add_custom_tag_infinite_image_browsing_db_add_custom_tag_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APICategoryMaskSamCategoryMaskPost Apis category mask
*/
func (a *Client) APICategoryMaskSamCategoryMaskPost(params *APICategoryMaskSamCategoryMaskPostParams, opts ...ClientOption) (*APICategoryMaskSamCategoryMaskPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICategoryMaskSamCategoryMaskPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_category_mask_sam_category_mask_post",
		Method:             "POST",
		PathPattern:        "/sam/category-mask",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICategoryMaskSamCategoryMaskPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APICategoryMaskSamCategoryMaskPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_category_mask_sam_category_mask_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIControlnetSegSamControlnetSegPost Apis controlnet seg
*/
func (a *Client) APIControlnetSegSamControlnetSegPost(params *APIControlnetSegSamControlnetSegPostParams, opts ...ClientOption) (*APIControlnetSegSamControlnetSegPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIControlnetSegSamControlnetSegPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_controlnet_seg_sam_controlnet_seg_post",
		Method:             "POST",
		PathPattern:        "/sam/controlnet-seg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIControlnetSegSamControlnetSegPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIControlnetSegSamControlnetSegPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_controlnet_seg_sam_controlnet_seg_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIDilateMaskSamDilateMaskPost Apis dilate mask
*/
func (a *Client) APIDilateMaskSamDilateMaskPost(params *APIDilateMaskSamDilateMaskPostParams, opts ...ClientOption) (*APIDilateMaskSamDilateMaskPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDilateMaskSamDilateMaskPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_dilate_mask_sam_dilate_mask_post",
		Method:             "POST",
		PathPattern:        "/sam/dilate-mask",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDilateMaskSamDilateMaskPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIDilateMaskSamDilateMaskPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_dilate_mask_sam_dilate_mask_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIDinoPredictSamDinoPredictPost Apis dino predict
*/
func (a *Client) APIDinoPredictSamDinoPredictPost(params *APIDinoPredictSamDinoPredictPostParams, opts ...ClientOption) (*APIDinoPredictSamDinoPredictPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDinoPredictSamDinoPredictPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_dino_predict_sam_dino_predict_post",
		Method:             "POST",
		PathPattern:        "/sam/dino-predict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDinoPredictSamDinoPredictPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIDinoPredictSamDinoPredictPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_dino_predict_sam_dino_predict_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APIInfoInfoGet Apis info
*/
func (a *Client) APIInfoInfoGet(params *APIInfoInfoGetParams, opts ...ClientOption) (*APIInfoInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIInfoInfoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_info_info_get",
		Method:             "GET",
		PathPattern:        "/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIInfoInfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APIInfoInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_info_info_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APISamModelSamSamModelGet Apis sam model

Query available SAM model
*/
func (a *Client) APISamModelSamSamModelGet(params *APISamModelSamSamModelGetParams, opts ...ClientOption) (*APISamModelSamSamModelGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISamModelSamSamModelGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_sam_model_sam_sam_model_get",
		Method:             "GET",
		PathPattern:        "/sam/sam-model",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISamModelSamSamModelGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APISamModelSamSamModelGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_sam_model_sam_sam_model_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APISamPredictSamSamPredictPost Apis sam predict
*/
func (a *Client) APISamPredictSamSamPredictPost(params *APISamPredictSamSamPredictPostParams, opts ...ClientOption) (*APISamPredictSamSamPredictPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISamPredictSamSamPredictPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_sam_predict_sam_sam_predict_post",
		Method:             "POST",
		PathPattern:        "/sam/sam-predict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISamPredictSamSamPredictPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APISamPredictSamSamPredictPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_sam_predict_sam_sam_predict_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGet Apis set send img path
*/
func (a *Client) APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGet(params *APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetParams, opts ...ClientOption) (*APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_set_send_img_path_infinite_image_browsing_gen_info_completed_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/gen_info_completed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APISetSendImgPathInfiniteImageBrowsingGenInfoCompletedGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_set_send_img_path_infinite_image_browsing_gen_info_completed_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
APISetSendImgPathInfiniteImageBrowsingSendImgPathPost Apis set send img path
*/
func (a *Client) APISetSendImgPathInfiniteImageBrowsingSendImgPathPost(params *APISetSendImgPathInfiniteImageBrowsingSendImgPathPostParams, opts ...ClientOption) (*APISetSendImgPathInfiniteImageBrowsingSendImgPathPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISetSendImgPathInfiniteImageBrowsingSendImgPathPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "api_set_send_img_path_infinite_image_browsing_send_img_path_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/send_img_path",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISetSendImgPathInfiniteImageBrowsingSendImgPathPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APISetSendImgPathInfiniteImageBrowsingSendImgPathPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for api_set_send_img_path_infinite_image_browsing_send_img_path_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AppIDAppIDGet apps Id
*/
func (a *Client) AppIDAppIDGet(params *AppIDAppIDGetParams, opts ...ClientOption) (*AppIDAppIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAppIDAppIDGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "app_id_app_id_get",
		Method:             "GET",
		PathPattern:        "/app_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AppIDAppIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AppIDAppIDGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for app_id_app_id_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BuildResourceAssetsPathGet builds resource
*/
func (a *Client) BuildResourceAssetsPathGet(params *BuildResourceAssetsPathGetParams, opts ...ClientOption) (*BuildResourceAssetsPathGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBuildResourceAssetsPathGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "build_resource_assets__path__get",
		Method:             "GET",
		PathPattern:        "/assets/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BuildResourceAssetsPathGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BuildResourceAssetsPathGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for build_resource_assets__path__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckPathExistsInfiniteImageBrowsingCheckPathExistsPost checks path exists
*/
func (a *Client) CheckPathExistsInfiniteImageBrowsingCheckPathExistsPost(params *CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostParams, opts ...ClientOption) (*CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckPathExistsInfiniteImageBrowsingCheckPathExistsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "check_path_exists_infinite_image_browsing_check_path_exists_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/check_path_exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckPathExistsInfiniteImageBrowsingCheckPathExistsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for check_path_exists_infinite_image_browsing_check_path_exists_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CopyFilesInfiniteImageBrowsingCopyFilesPost copies files
*/
func (a *Client) CopyFilesInfiniteImageBrowsingCopyFilesPost(params *CopyFilesInfiniteImageBrowsingCopyFilesPostParams, opts ...ClientOption) (*CopyFilesInfiniteImageBrowsingCopyFilesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyFilesInfiniteImageBrowsingCopyFilesPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "copy_files_infinite_image_browsing_copy_files_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/copy_files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyFilesInfiniteImageBrowsingCopyFilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CopyFilesInfiniteImageBrowsingCopyFilesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for copy_files_infinite_image_browsing_copy_files_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateEmbeddingSdapiV1CreateEmbeddingPost creates embedding
*/
func (a *Client) CreateEmbeddingSdapiV1CreateEmbeddingPost(params *CreateEmbeddingSdapiV1CreateEmbeddingPostParams, opts ...ClientOption) (*CreateEmbeddingSdapiV1CreateEmbeddingPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEmbeddingSdapiV1CreateEmbeddingPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_embedding_sdapi_v1_create_embedding_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/create/embedding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEmbeddingSdapiV1CreateEmbeddingPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEmbeddingSdapiV1CreateEmbeddingPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_embedding_sdapi_v1_create_embedding_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateFoldersInfiniteImageBrowsingMkdirsPost creates folders
*/
func (a *Client) CreateFoldersInfiniteImageBrowsingMkdirsPost(params *CreateFoldersInfiniteImageBrowsingMkdirsPostParams, opts ...ClientOption) (*CreateFoldersInfiniteImageBrowsingMkdirsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFoldersInfiniteImageBrowsingMkdirsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_folders_infinite_image_browsing_mkdirs_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/mkdirs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFoldersInfiniteImageBrowsingMkdirsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateFoldersInfiniteImageBrowsingMkdirsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_folders_infinite_image_browsing_mkdirs_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateHypernetworkSdapiV1CreateHypernetworkPost creates hypernetwork
*/
func (a *Client) CreateHypernetworkSdapiV1CreateHypernetworkPost(params *CreateHypernetworkSdapiV1CreateHypernetworkPostParams, opts ...ClientOption) (*CreateHypernetworkSdapiV1CreateHypernetworkPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHypernetworkSdapiV1CreateHypernetworkPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_hypernetwork_sdapi_v1_create_hypernetwork_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/create/hypernetwork",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHypernetworkSdapiV1CreateHypernetworkPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHypernetworkSdapiV1CreateHypernetworkPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_hypernetwork_sdapi_v1_create_hypernetwork_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateScannedPathInfiniteImageBrowsingDbScannedPathsPost creates scanned path
*/
func (a *Client) CreateScannedPathInfiniteImageBrowsingDbScannedPathsPost(params *CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostParams, opts ...ClientOption) (*CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateScannedPathInfiniteImageBrowsingDbScannedPathsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "create_scanned_path_infinite_image_browsing_db_scanned_paths_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/scanned_paths",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateScannedPathInfiniteImageBrowsingDbScannedPathsPostCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for create_scanned_path_infinite_image_browsing_db_scanned_paths_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFilesInfiniteImageBrowsingDeleteFilesPost deletes files
*/
func (a *Client) DeleteFilesInfiniteImageBrowsingDeleteFilesPost(params *DeleteFilesInfiniteImageBrowsingDeleteFilesPostParams, opts ...ClientOption) (*DeleteFilesInfiniteImageBrowsingDeleteFilesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesInfiniteImageBrowsingDeleteFilesPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "delete_files_infinite_image_browsing_delete_files_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/delete_files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilesInfiniteImageBrowsingDeleteFilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilesInfiniteImageBrowsingDeleteFilesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for delete_files_infinite_image_browsing_delete_files_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeoldifyImageDeoldifyImagePost deoldifies image
*/
func (a *Client) DeoldifyImageDeoldifyImagePost(params *DeoldifyImageDeoldifyImagePostParams, opts ...ClientOption) (*DeoldifyImageDeoldifyImagePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeoldifyImageDeoldifyImagePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deoldify_image_deoldify_image_post",
		Method:             "POST",
		PathPattern:        "/deoldify/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeoldifyImageDeoldifyImagePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeoldifyImageDeoldifyImagePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deoldify_image_deoldify_image_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DetectControlnetDetectPost detects
*/
func (a *Client) DetectControlnetDetectPost(params *DetectControlnetDetectPostParams, opts ...ClientOption) (*DetectControlnetDetectPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetectControlnetDetectPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detect_controlnet_detect_post",
		Method:             "POST",
		PathPattern:        "/controlnet/detect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DetectControlnetDetectPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetectControlnetDetectPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detect_controlnet_detect_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPost extras batch images Api
*/
func (a *Client) ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPost(params *ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostParams, opts ...ClientOption) (*ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "extras_batch_images_api_sdapi_v1_extra_batch_images_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/extra-batch-images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExtrasBatchImagesAPISdapiV1ExtraBatchImagesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extras_batch_images_api_sdapi_v1_extra_batch_images_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExtrasSingleImageAPISdapiV1ExtraSingleImagePost extras single image Api
*/
func (a *Client) ExtrasSingleImageAPISdapiV1ExtraSingleImagePost(params *ExtrasSingleImageAPISdapiV1ExtraSingleImagePostParams, opts ...ClientOption) (*ExtrasSingleImageAPISdapiV1ExtraSingleImagePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExtrasSingleImageAPISdapiV1ExtraSingleImagePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "extras_single_image_api_sdapi_v1_extra_single_image_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/extra-single-image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExtrasSingleImageAPISdapiV1ExtraSingleImagePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExtrasSingleImageAPISdapiV1ExtraSingleImagePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for extras_single_image_api_sdapi_v1_extra_single_image_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FaviconFaviconIcoGet favicons
*/
func (a *Client) FaviconFaviconIcoGet(params *FaviconFaviconIcoGetParams, opts ...ClientOption) (*FaviconFaviconIcoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFaviconFaviconIcoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "favicon_favicon_ico_get",
		Method:             "GET",
		PathPattern:        "/favicon.ico",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FaviconFaviconIcoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FaviconFaviconIcoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for favicon_favicon_ico_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FetchFileSdExtraNetworksThumbGet fetches file
*/
func (a *Client) FetchFileSdExtraNetworksThumbGet(params *FetchFileSdExtraNetworksThumbGetParams, opts ...ClientOption) (*FetchFileSdExtraNetworksThumbGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFetchFileSdExtraNetworksThumbGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "fetch_file_sd_extra_networks_thumb_get",
		Method:             "GET",
		PathPattern:        "/sd_extra_networks/thumb",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FetchFileSdExtraNetworksThumbGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FetchFileSdExtraNetworksThumbGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for fetch_file_sd_extra_networks_thumb_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FileDeprecatedFilePathGet files deprecated
*/
func (a *Client) FileDeprecatedFilePathGet(params *FileDeprecatedFilePathGetParams, opts ...ClientOption) (*FileDeprecatedFilePathGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileDeprecatedFilePathGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "file_deprecated_file__path__get",
		Method:             "GET",
		PathPattern:        "/file/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FileDeprecatedFilePathGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FileDeprecatedFilePathGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_deprecated_file__path__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FileFilePathOrURLGet files
*/
func (a *Client) FileFilePathOrURLGet(params *FileFilePathOrURLGetParams, opts ...ClientOption) (*FileFilePathOrURLGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileFilePathOrURLGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "file_file__path_or_url__get",
		Method:             "GET",
		PathPattern:        "/file={path_or_url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FileFilePathOrURLGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FileFilePathOrURLGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_file__path_or_url__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FileFilePathOrURLHead files
*/
func (a *Client) FileFilePathOrURLHead(params *FileFilePathOrURLHeadParams, opts ...ClientOption) (*FileFilePathOrURLHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFileFilePathOrURLHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "file_file__path_or_url__head",
		Method:             "HEAD",
		PathPattern:        "/file={path_or_url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FileFilePathOrURLHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FileFilePathOrURLHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for file_file__path_or_url__head: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCmdFlagsSdapiV1CmdFlagsGet gets cmd flags
*/
func (a *Client) GetCmdFlagsSdapiV1CmdFlagsGet(params *GetCmdFlagsSdapiV1CmdFlagsGetParams, opts ...ClientOption) (*GetCmdFlagsSdapiV1CmdFlagsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCmdFlagsSdapiV1CmdFlagsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_cmd_flags_sdapi_v1_cmd_flags_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/cmd-flags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCmdFlagsSdapiV1CmdFlagsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCmdFlagsSdapiV1CmdFlagsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_cmd_flags_sdapi_v1_cmd_flags_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigConfigGet gets config
*/
func (a *Client) GetConfigConfigGet(params *GetConfigConfigGetParams, opts ...ClientOption) (*GetConfigConfigGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigConfigGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_config_config_get",
		Method:             "GET",
		PathPattern:        "/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigConfigGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigConfigGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_config_config_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigSdapiV1OptionsGet gets config
*/
func (a *Client) GetConfigSdapiV1OptionsGet(params *GetConfigSdapiV1OptionsGetParams, opts ...ClientOption) (*GetConfigSdapiV1OptionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigSdapiV1OptionsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_config_sdapi_v1_options_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigSdapiV1OptionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigSdapiV1OptionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_config_sdapi_v1_options_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCurrentUserUserGet gets current user
*/
func (a *Client) GetCurrentUserUserGet(params *GetCurrentUserUserGetParams, opts ...ClientOption) (*GetCurrentUserUserGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCurrentUserUserGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_current_user_user_get",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCurrentUserUserGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCurrentUserUserGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_current_user_user_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGet gets db basic info
*/
func (a *Client) GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGet(params *GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetParams, opts ...ClientOption) (*GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_db_basic_info_infinite_image_browsing_db_basic_info_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/db/basic_info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDbBasicInfoInfiniteImageBrowsingDbBasicInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_db_basic_info_infinite_image_browsing_db_basic_info_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGet gets db expired
*/
func (a *Client) GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGet(params *GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetParams, opts ...ClientOption) (*GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_db_expired_infinite_image_browsing_db_expired_dirs_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/db/expired_dirs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDbExpiredInfiniteImageBrowsingDbExpiredDirsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_db_expired_infinite_image_browsing_db_expired_dirs_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEmbeddingsSdapiV1EmbeddingsGet gets embeddings
*/
func (a *Client) GetEmbeddingsSdapiV1EmbeddingsGet(params *GetEmbeddingsSdapiV1EmbeddingsGetParams, opts ...ClientOption) (*GetEmbeddingsSdapiV1EmbeddingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmbeddingsSdapiV1EmbeddingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_embeddings_sdapi_v1_embeddings_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/embeddings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmbeddingsSdapiV1EmbeddingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmbeddingsSdapiV1EmbeddingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_embeddings_sdapi_v1_embeddings_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFaceRestorersSdapiV1FaceRestorersGet gets face restorers
*/
func (a *Client) GetFaceRestorersSdapiV1FaceRestorersGet(params *GetFaceRestorersSdapiV1FaceRestorersGetParams, opts ...ClientOption) (*GetFaceRestorersSdapiV1FaceRestorersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFaceRestorersSdapiV1FaceRestorersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_face_restorers_sdapi_v1_face_restorers_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/face-restorers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFaceRestorersSdapiV1FaceRestorersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFaceRestorersSdapiV1FaceRestorersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_face_restorers_sdapi_v1_face_restorers_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileInfiniteImageBrowsingFileGet gets file
*/
func (a *Client) GetFileInfiniteImageBrowsingFileGet(params *GetFileInfiniteImageBrowsingFileGetParams, opts ...ClientOption) (*GetFileInfiniteImageBrowsingFileGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileInfiniteImageBrowsingFileGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_file_infinite_image_browsing_file_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileInfiniteImageBrowsingFileGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileInfiniteImageBrowsingFileGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_file_infinite_image_browsing_file_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHypernetworksSdapiV1HypernetworksGet gets hypernetworks
*/
func (a *Client) GetHypernetworksSdapiV1HypernetworksGet(params *GetHypernetworksSdapiV1HypernetworksGetParams, opts ...ClientOption) (*GetHypernetworksSdapiV1HypernetworksGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHypernetworksSdapiV1HypernetworksGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_hypernetworks_sdapi_v1_hypernetworks_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/hypernetworks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHypernetworksSdapiV1HypernetworksGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHypernetworksSdapiV1HypernetworksGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_hypernetworks_sdapi_v1_hypernetworks_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGet gets img selected custom tag
*/
func (a *Client) GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGet(params *GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetParams, opts ...ClientOption) (*GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_img_selected_custom_tag_infinite_image_browsing_db_img_selected_custom_tag_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/db/img_selected_custom_tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImgSelectedCustomTagInfiniteImageBrowsingDbImgSelectedCustomTagGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_img_selected_custom_tag_infinite_image_browsing_db_img_selected_custom_tag_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetImgTagsInfiniteImageBrowsingDbGetImageTagsPost gets img tags
*/
func (a *Client) GetImgTagsInfiniteImageBrowsingDbGetImageTagsPost(params *GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostParams, opts ...ClientOption) (*GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImgTagsInfiniteImageBrowsingDbGetImageTagsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_img_tags_infinite_image_browsing_db_get_image_tags_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/get_image_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImgTagsInfiniteImageBrowsingDbGetImageTagsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_img_tags_infinite_image_browsing_db_get_image_tags_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet gets latent upscale modes
*/
func (a *Client) GetLatentUpscaleModesSdapiV1LatentUpscaleModesGet(params *GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetParams, opts ...ClientOption) (*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatentUpscaleModesSdapiV1LatentUpscaleModesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/latent-upscale-modes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatentUpscaleModesSdapiV1LatentUpscaleModesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_latent_upscale_modes_sdapi_v1_latent_upscale_modes_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLorasSdapiV1LorasGet gets loras
*/
func (a *Client) GetLorasSdapiV1LorasGet(params *GetLorasSdapiV1LorasGetParams, opts ...ClientOption) (*GetLorasSdapiV1LorasGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLorasSdapiV1LorasGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_loras_sdapi_v1_loras_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/loras",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLorasSdapiV1LorasGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLorasSdapiV1LorasGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_loras_sdapi_v1_loras_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLycosSdapiV1LycosGet gets lycos
*/
func (a *Client) GetLycosSdapiV1LycosGet(params *GetLycosSdapiV1LycosGetParams, opts ...ClientOption) (*GetLycosSdapiV1LycosGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLycosSdapiV1LycosGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_lycos_sdapi_v1_lycos_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/lycos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLycosSdapiV1LycosGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLycosSdapiV1LycosGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_lycos_sdapi_v1_lycos_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemorySdapiV1MemoryGet gets memory
*/
func (a *Client) GetMemorySdapiV1MemoryGet(params *GetMemorySdapiV1MemoryGetParams, opts ...ClientOption) (*GetMemorySdapiV1MemoryGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemorySdapiV1MemoryGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_memory_sdapi_v1_memory_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/memory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemorySdapiV1MemoryGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemorySdapiV1MemoryGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_memory_sdapi_v1_memory_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMetadataSdExtraNetworksMetadataGet gets metadata
*/
func (a *Client) GetMetadataSdExtraNetworksMetadataGet(params *GetMetadataSdExtraNetworksMetadataGetParams, opts ...ClientOption) (*GetMetadataSdExtraNetworksMetadataGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMetadataSdExtraNetworksMetadataGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_metadata_sd_extra_networks_metadata_get",
		Method:             "GET",
		PathPattern:        "/sd_extra_networks/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMetadataSdExtraNetworksMetadataGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMetadataSdExtraNetworksMetadataGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_metadata_sd_extra_networks_metadata_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPromptStylesSdapiV1PromptStylesGet gets prompt styles
*/
func (a *Client) GetPromptStylesSdapiV1PromptStylesGet(params *GetPromptStylesSdapiV1PromptStylesGetParams, opts ...ClientOption) (*GetPromptStylesSdapiV1PromptStylesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPromptStylesSdapiV1PromptStylesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_prompt_styles_sdapi_v1_prompt_styles_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/prompt-styles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPromptStylesSdapiV1PromptStylesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPromptStylesSdapiV1PromptStylesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_prompt_styles_sdapi_v1_prompt_styles_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetQueueStatusQueueStatusGet gets queue status
*/
func (a *Client) GetQueueStatusQueueStatusGet(params *GetQueueStatusQueueStatusGetParams, opts ...ClientOption) (*GetQueueStatusQueueStatusGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueueStatusQueueStatusGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_queue_status_queue_status_get",
		Method:             "GET",
		PathPattern:        "/queue/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetQueueStatusQueueStatusGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueueStatusQueueStatusGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_queue_status_queue_status_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRealesrganModelsSdapiV1RealesrganModelsGet gets realesrgan models
*/
func (a *Client) GetRealesrganModelsSdapiV1RealesrganModelsGet(params *GetRealesrganModelsSdapiV1RealesrganModelsGetParams, opts ...ClientOption) (*GetRealesrganModelsSdapiV1RealesrganModelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealesrganModelsSdapiV1RealesrganModelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_realesrgan_models_sdapi_v1_realesrgan_models_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/realesrgan-models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRealesrganModelsSdapiV1RealesrganModelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealesrganModelsSdapiV1RealesrganModelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_realesrgan_models_sdapi_v1_realesrgan_models_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSamplersSdapiV1SamplersGet gets samplers
*/
func (a *Client) GetSamplersSdapiV1SamplersGet(params *GetSamplersSdapiV1SamplersGetParams, opts ...ClientOption) (*GetSamplersSdapiV1SamplersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSamplersSdapiV1SamplersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_samplers_sdapi_v1_samplers_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/samplers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSamplersSdapiV1SamplersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSamplersSdapiV1SamplersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_samplers_sdapi_v1_samplers_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScriptInfoSdapiV1ScriptInfoGet gets script info
*/
func (a *Client) GetScriptInfoSdapiV1ScriptInfoGet(params *GetScriptInfoSdapiV1ScriptInfoGetParams, opts ...ClientOption) (*GetScriptInfoSdapiV1ScriptInfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptInfoSdapiV1ScriptInfoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_script_info_sdapi_v1_script_info_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/script-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScriptInfoSdapiV1ScriptInfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptInfoSdapiV1ScriptInfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_script_info_sdapi_v1_script_info_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetScriptsListSdapiV1ScriptsGet gets scripts list
*/
func (a *Client) GetScriptsListSdapiV1ScriptsGet(params *GetScriptsListSdapiV1ScriptsGetParams, opts ...ClientOption) (*GetScriptsListSdapiV1ScriptsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScriptsListSdapiV1ScriptsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_scripts_list_sdapi_v1_scripts_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/scripts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScriptsListSdapiV1ScriptsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScriptsListSdapiV1ScriptsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_scripts_list_sdapi_v1_scripts_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSdModelsSdapiV1SdModelsGet gets sd models
*/
func (a *Client) GetSdModelsSdapiV1SdModelsGet(params *GetSdModelsSdapiV1SdModelsGetParams, opts ...ClientOption) (*GetSdModelsSdapiV1SdModelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSdModelsSdapiV1SdModelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_sd_models_sdapi_v1_sd_models_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/sd-models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSdModelsSdapiV1SdModelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSdModelsSdapiV1SdModelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_sd_models_sdapi_v1_sd_models_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSdVaesSdapiV1SdVaeGet gets sd vaes
*/
func (a *Client) GetSdVaesSdapiV1SdVaeGet(params *GetSdVaesSdapiV1SdVaeGetParams, opts ...ClientOption) (*GetSdVaesSdapiV1SdVaeGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSdVaesSdapiV1SdVaeGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_sd_vaes_sdapi_v1_sd_vae_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/sd-vae",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSdVaesSdapiV1SdVaeGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSdVaesSdapiV1SdVaeGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_sd_vaes_sdapi_v1_sd_vae_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSingleCardSdExtraNetworksGetSingleCardGet gets single card
*/
func (a *Client) GetSingleCardSdExtraNetworksGetSingleCardGet(params *GetSingleCardSdExtraNetworksGetSingleCardGetParams, opts ...ClientOption) (*GetSingleCardSdExtraNetworksGetSingleCardGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleCardSdExtraNetworksGetSingleCardGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_single_card_sd_extra_networks_get_single_card_get",
		Method:             "GET",
		PathPattern:        "/sd_extra_networks/get-single-card",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSingleCardSdExtraNetworksGetSingleCardGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSingleCardSdExtraNetworksGetSingleCardGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_single_card_sd_extra_networks_get_single_card_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTargetFloderFilesInfiniteImageBrowsingFilesGet gets target floder files
*/
func (a *Client) GetTargetFloderFilesInfiniteImageBrowsingFilesGet(params *GetTargetFloderFilesInfiniteImageBrowsingFilesGetParams, opts ...ClientOption) (*GetTargetFloderFilesInfiniteImageBrowsingFilesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTargetFloderFilesInfiniteImageBrowsingFilesGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_target_floder_files_infinite_image_browsing_files_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTargetFloderFilesInfiniteImageBrowsingFilesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTargetFloderFilesInfiniteImageBrowsingFilesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_target_floder_files_infinite_image_browsing_files_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTokenTokenGet gets token
*/
func (a *Client) GetTokenTokenGet(params *GetTokenTokenGetParams, opts ...ClientOption) (*GetTokenTokenGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokenTokenGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_token_token_get",
		Method:             "GET",
		PathPattern:        "/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokenTokenGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokenTokenGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_token_token_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUpscalersSdapiV1UpscalersGet gets upscalers
*/
func (a *Client) GetUpscalersSdapiV1UpscalersGet(params *GetUpscalersSdapiV1UpscalersGetParams, opts ...ClientOption) (*GetUpscalersSdapiV1UpscalersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUpscalersSdapiV1UpscalersGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "get_upscalers_sdapi_v1_upscalers_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/upscalers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUpscalersSdapiV1UpscalersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUpscalersSdapiV1UpscalersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for get_upscalers_sdapi_v1_upscalers_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GlobalSettingInfiniteImageBrowsingGlobalSettingGet globals setting
*/
func (a *Client) GlobalSettingInfiniteImageBrowsingGlobalSettingGet(params *GlobalSettingInfiniteImageBrowsingGlobalSettingGetParams, opts ...ClientOption) (*GlobalSettingInfiniteImageBrowsingGlobalSettingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGlobalSettingInfiniteImageBrowsingGlobalSettingGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "global_setting_infinite_image_browsing_global_setting_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/global_setting",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GlobalSettingInfiniteImageBrowsingGlobalSettingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GlobalSettingInfiniteImageBrowsingGlobalSettingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for global_setting_infinite_image_browsing_global_setting_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GreetingInfiniteImageBrowsingHelloGet greetings
*/
func (a *Client) GreetingInfiniteImageBrowsingHelloGet(params *GreetingInfiniteImageBrowsingHelloGetParams, opts ...ClientOption) (*GreetingInfiniteImageBrowsingHelloGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGreetingInfiniteImageBrowsingHelloGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "greeting_infinite_image_browsing_hello_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/hello",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GreetingInfiniteImageBrowsingHelloGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GreetingInfiniteImageBrowsingHelloGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for greeting_infinite_image_browsing_hello_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeartbeatSamHeartbeatGet heartbeats
*/
func (a *Client) HeartbeatSamHeartbeatGet(params *HeartbeatSamHeartbeatGetParams, opts ...ClientOption) (*HeartbeatSamHeartbeatGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeartbeatSamHeartbeatGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "heartbeat_sam_heartbeat_get",
		Method:             "GET",
		PathPattern:        "/sam/heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeartbeatSamHeartbeatGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeartbeatSamHeartbeatGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for heartbeat_sam_heartbeat_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ImageGeninfoInfiniteImageBrowsingImageGeninfoGet images geninfo
*/
func (a *Client) ImageGeninfoInfiniteImageBrowsingImageGeninfoGet(params *ImageGeninfoInfiniteImageBrowsingImageGeninfoGetParams, opts ...ClientOption) (*ImageGeninfoInfiniteImageBrowsingImageGeninfoGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImageGeninfoInfiniteImageBrowsingImageGeninfoGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "image_geninfo_infinite_image_browsing_image_geninfo_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/image_geninfo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImageGeninfoInfiniteImageBrowsingImageGeninfoGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImageGeninfoInfiniteImageBrowsingImageGeninfoGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for image_geninfo_infinite_image_browsing_image_geninfo_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Img2imgapiSdapiV1Img2imgPost img2s imgapi
*/
func (a *Client) Img2imgapiSdapiV1Img2imgPost(params *Img2imgapiSdapiV1Img2imgPostParams, opts ...ClientOption) (*Img2imgapiSdapiV1Img2imgPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImg2imgapiSdapiV1Img2imgPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "img2imgapi_sdapi_v1_img2img_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/img2img",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Img2imgapiSdapiV1Img2imgPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Img2imgapiSdapiV1Img2imgPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for img2imgapi_sdapi_v1_img2img_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IndexBdInfiniteImageBrowsingGet indices bd
*/
func (a *Client) IndexBdInfiniteImageBrowsingGet(params *IndexBdInfiniteImageBrowsingGetParams, opts ...ClientOption) (*IndexBdInfiniteImageBrowsingGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexBdInfiniteImageBrowsingGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "index_bd_infinite_image_browsing_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexBdInfiniteImageBrowsingGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexBdInfiniteImageBrowsingGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for index_bd_infinite_image_browsing_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterrogateapiSdapiV1InterrogatePost interrogateapis
*/
func (a *Client) InterrogateapiSdapiV1InterrogatePost(params *InterrogateapiSdapiV1InterrogatePostParams, opts ...ClientOption) (*InterrogateapiSdapiV1InterrogatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterrogateapiSdapiV1InterrogatePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "interrogateapi_sdapi_v1_interrogate_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/interrogate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InterrogateapiSdapiV1InterrogatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterrogateapiSdapiV1InterrogatePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for interrogateapi_sdapi_v1_interrogate_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InterruptapiSdapiV1InterruptPost interruptapis
*/
func (a *Client) InterruptapiSdapiV1InterruptPost(params *InterruptapiSdapiV1InterruptPostParams, opts ...ClientOption) (*InterruptapiSdapiV1InterruptPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInterruptapiSdapiV1InterruptPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "interruptapi_sdapi_v1_interrupt_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/interrupt",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InterruptapiSdapiV1InterruptPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InterruptapiSdapiV1InterruptPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for interruptapi_sdapi_v1_interrupt_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginCheckLoginCheckGet logins check
*/
func (a *Client) LoginCheckLoginCheckGet(params *LoginCheckLoginCheckGetParams, opts ...ClientOption) (*LoginCheckLoginCheckGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginCheckLoginCheckGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "login_check_login_check_get",
		Method:             "GET",
		PathPattern:        "/login_check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginCheckLoginCheckGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginCheckLoginCheckGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for login_check_login_check_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
LoginLoginPost logins
*/
func (a *Client) LoginLoginPost(params *LoginLoginPostParams, opts ...ClientOption) (*LoginLoginPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginLoginPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "login_login_post",
		Method:             "POST",
		PathPattern:        "/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginLoginPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginLoginPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for login_login_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MainGet mains
*/
func (a *Client) MainGet(params *MainGetParams, opts ...ClientOption) (*MainGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMainGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "main__get",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MainGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MainGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for main__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MainHead mains
*/
func (a *Client) MainHead(params *MainHeadParams, opts ...ClientOption) (*MainHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMainHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "main__head",
		Method:             "HEAD",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"text/html"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MainHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MainHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for main__head: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPost matches image by tags
*/
func (a *Client) MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPost(params *MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostParams, opts ...ClientOption) (*MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "match_image_by_tags_infinite_image_browsing_db_match_images_by_tags_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/match_images_by_tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MatchImageByTagsInfiniteImageBrowsingDbMatchImagesByTagsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for match_image_by_tags_infinite_image_browsing_db_match_images_by_tags_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModelListControlnetModelListGet models list
*/
func (a *Client) ModelListControlnetModelListGet(params *ModelListControlnetModelListGetParams, opts ...ClientOption) (*ModelListControlnetModelListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModelListControlnetModelListGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "model_list_controlnet_model_list_get",
		Method:             "GET",
		PathPattern:        "/controlnet/model_list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModelListControlnetModelListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModelListControlnetModelListGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for model_list_controlnet_model_list_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ModuleListControlnetModuleListGet modules list
*/
func (a *Client) ModuleListControlnetModuleListGet(params *ModuleListControlnetModuleListGetParams, opts ...ClientOption) (*ModuleListControlnetModuleListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModuleListControlnetModuleListGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "module_list_controlnet_module_list_get",
		Method:             "GET",
		PathPattern:        "/controlnet/module_list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ModuleListControlnetModuleListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ModuleListControlnetModuleListGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for module_list_controlnet_module_list_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MoveFilesInfiniteImageBrowsingMoveFilesPost moves files
*/
func (a *Client) MoveFilesInfiniteImageBrowsingMoveFilesPost(params *MoveFilesInfiniteImageBrowsingMoveFilesPostParams, opts ...ClientOption) (*MoveFilesInfiniteImageBrowsingMoveFilesPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMoveFilesInfiniteImageBrowsingMoveFilesPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "move_files_infinite_image_browsing_move_files_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/move_files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MoveFilesInfiniteImageBrowsingMoveFilesPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MoveFilesInfiniteImageBrowsingMoveFilesPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for move_files_infinite_image_browsing_move_files_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPost opens folder using explore
*/
func (a *Client) OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPost(params *OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostParams, opts ...ClientOption) (*OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "open_folder_using_explore_infinite_image_browsing_open_folder_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/open_folder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OpenFolderUsingExploreInfiniteImageBrowsingOpenFolderPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for open_folder_using_explore_infinite_image_browsing_open_folder_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PnginfoapiSdapiV1PngInfoPost pnginfoapis
*/
func (a *Client) PnginfoapiSdapiV1PngInfoPost(params *PnginfoapiSdapiV1PngInfoPostParams, opts ...ClientOption) (*PnginfoapiSdapiV1PngInfoPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPnginfoapiSdapiV1PngInfoPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "pnginfoapi_sdapi_v1_png_info_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/png-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PnginfoapiSdapiV1PngInfoPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PnginfoapiSdapiV1PngInfoPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pnginfoapi_sdapi_v1_png_info_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PredictAPIAPINamePost predicts
*/
func (a *Client) PredictAPIAPINamePost(params *PredictAPIAPINamePostParams, opts ...ClientOption) (*PredictAPIAPINamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPredictAPIAPINamePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "predict_api__api_name__post",
		Method:             "POST",
		PathPattern:        "/api/{api_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PredictAPIAPINamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PredictAPIAPINamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for predict_api__api_name__post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PredictOcrPredictPost predicts
*/
func (a *Client) PredictOcrPredictPost(params *PredictOcrPredictPostParams, opts ...ClientOption) (*PredictOcrPredictPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPredictOcrPredictPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "predict_ocr_predict_post",
		Method:             "POST",
		PathPattern:        "/ocr/predict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PredictOcrPredictPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PredictOcrPredictPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for predict_ocr_predict_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PredictRunAPINamePost predicts
*/
func (a *Client) PredictRunAPINamePost(params *PredictRunAPINamePostParams, opts ...ClientOption) (*PredictRunAPINamePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPredictRunAPINamePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "predict_run__api_name__post",
		Method:             "POST",
		PathPattern:        "/run/{api_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PredictRunAPINamePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PredictRunAPINamePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for predict_run__api_name__post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreprocessSdapiV1PreprocessPost preprocesses
*/
func (a *Client) PreprocessSdapiV1PreprocessPost(params *PreprocessSdapiV1PreprocessPostParams, opts ...ClientOption) (*PreprocessSdapiV1PreprocessPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreprocessSdapiV1PreprocessPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "preprocess_sdapi_v1_preprocess_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/preprocess",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PreprocessSdapiV1PreprocessPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreprocessSdapiV1PreprocessPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for preprocess_sdapi_v1_preprocess_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgressapiInternalProgressPost progressapis
*/
func (a *Client) ProgressapiInternalProgressPost(params *ProgressapiInternalProgressPostParams, opts ...ClientOption) (*ProgressapiInternalProgressPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgressapiInternalProgressPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "progressapi_internal_progress_post",
		Method:             "POST",
		PathPattern:        "/internal/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProgressapiInternalProgressPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgressapiInternalProgressPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for progressapi_internal_progress_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProgressapiSdapiV1ProgressGet progressapis
*/
func (a *Client) ProgressapiSdapiV1ProgressGet(params *ProgressapiSdapiV1ProgressGetParams, opts ...ClientOption) (*ProgressapiSdapiV1ProgressGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProgressapiSdapiV1ProgressGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "progressapi_sdapi_v1_progress_get",
		Method:             "GET",
		PathPattern:        "/sdapi/v1/progress",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProgressapiSdapiV1ProgressGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ProgressapiSdapiV1ProgressGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for progressapi_sdapi_v1_progress_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
QuicksettingsHintInternalQuicksettingsHintGet quicksettings hint
*/
func (a *Client) QuicksettingsHintInternalQuicksettingsHintGet(params *QuicksettingsHintInternalQuicksettingsHintGetParams, opts ...ClientOption) (*QuicksettingsHintInternalQuicksettingsHintGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQuicksettingsHintInternalQuicksettingsHintGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "quicksettings_hint_internal_quicksettings_hint_get",
		Method:             "GET",
		PathPattern:        "/internal/quicksettings-hint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QuicksettingsHintInternalQuicksettingsHintGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QuicksettingsHintInternalQuicksettingsHintGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for quicksettings_hint_internal_quicksettings_hint_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGet reads scanned paths
*/
func (a *Client) ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGet(params *ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetParams, opts ...ClientOption) (*ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "read_scanned_paths_infinite_image_browsing_db_scanned_paths_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/db/scanned_paths",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReadScannedPathsInfiniteImageBrowsingDbScannedPathsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for read_scanned_paths_infinite_image_browsing_db_scanned_paths_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshCheckpointsSdapiV1RefreshCheckpointsPost refreshes checkpoints
*/
func (a *Client) RefreshCheckpointsSdapiV1RefreshCheckpointsPost(params *RefreshCheckpointsSdapiV1RefreshCheckpointsPostParams, opts ...ClientOption) (*RefreshCheckpointsSdapiV1RefreshCheckpointsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshCheckpointsSdapiV1RefreshCheckpointsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh_checkpoints_sdapi_v1_refresh_checkpoints_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/refresh-checkpoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshCheckpointsSdapiV1RefreshCheckpointsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshCheckpointsSdapiV1RefreshCheckpointsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh_checkpoints_sdapi_v1_refresh_checkpoints_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshLorasSdapiV1RefreshLorasPost refreshes loras
*/
func (a *Client) RefreshLorasSdapiV1RefreshLorasPost(params *RefreshLorasSdapiV1RefreshLorasPostParams, opts ...ClientOption) (*RefreshLorasSdapiV1RefreshLorasPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshLorasSdapiV1RefreshLorasPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh_loras_sdapi_v1_refresh_loras_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/refresh-loras",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshLorasSdapiV1RefreshLorasPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshLorasSdapiV1RefreshLorasPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh_loras_sdapi_v1_refresh_loras_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RefreshLycosSdapiV1RefreshLycosPost refreshes lycos
*/
func (a *Client) RefreshLycosSdapiV1RefreshLycosPost(params *RefreshLycosSdapiV1RefreshLycosPostParams, opts ...ClientOption) (*RefreshLycosSdapiV1RefreshLycosPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshLycosSdapiV1RefreshLycosPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refresh_lycos_sdapi_v1_refresh_lycos_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/refresh-lycos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RefreshLycosSdapiV1RefreshLycosPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshLycosSdapiV1RefreshLycosPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for refresh_lycos_sdapi_v1_refresh_lycos_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReloadapiSdapiV1ReloadCheckpointPost reloadapis
*/
func (a *Client) ReloadapiSdapiV1ReloadCheckpointPost(params *ReloadapiSdapiV1ReloadCheckpointPostParams, opts ...ClientOption) (*ReloadapiSdapiV1ReloadCheckpointPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReloadapiSdapiV1ReloadCheckpointPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reloadapi_sdapi_v1_reload_checkpoint_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/reload-checkpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReloadapiSdapiV1ReloadCheckpointPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReloadapiSdapiV1ReloadCheckpointPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reloadapi_sdapi_v1_reload_checkpoint_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RembgRemoveRembgPost rembgs remove
*/
func (a *Client) RembgRemoveRembgPost(params *RembgRemoveRembgPostParams, opts ...ClientOption) (*RembgRemoveRembgPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRembgRemoveRembgPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rembg_remove_rembg_post",
		Method:             "POST",
		PathPattern:        "/rembg",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RembgRemoveRembgPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RembgRemoveRembgPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rembg_remove_rembg_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPost removes custom tag from img
*/
func (a *Client) RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPost(params *RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostParams, opts ...ClientOption) (*RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "remove_custom_tag_from_img_infinite_image_browsing_db_remove_custom_tag_from_img_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/remove_custom_tag_from_img",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveCustomTagFromImgInfiniteImageBrowsingDbRemoveCustomTagFromImgPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for remove_custom_tag_from_img_infinite_image_browsing_db_remove_custom_tag_from_img_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPost removes custom tag
*/
func (a *Client) RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPost(params *RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostParams, opts ...ClientOption) (*RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "remove_custom_tag_infinite_image_browsing_db_remove_custom_tag_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/remove_custom_tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveCustomTagInfiniteImageBrowsingDbRemoveCustomTagPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for remove_custom_tag_infinite_image_browsing_db_remove_custom_tag_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResetIteratorResetPost resets iterator
*/
func (a *Client) ResetIteratorResetPost(params *ResetIteratorResetPostParams, opts ...ClientOption) (*ResetIteratorResetPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetIteratorResetPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reset_iterator_reset_post",
		Method:             "POST",
		PathPattern:        "/reset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResetIteratorResetPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetIteratorResetPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reset_iterator_reset_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReverseProxyProxyURLPathGet reverses proxy
*/
func (a *Client) ReverseProxyProxyURLPathGet(params *ReverseProxyProxyURLPathGetParams, opts ...ClientOption) (*ReverseProxyProxyURLPathGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReverseProxyProxyURLPathGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reverse_proxy_proxy__url_path__get",
		Method:             "GET",
		PathPattern:        "/proxy={url_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReverseProxyProxyURLPathGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReverseProxyProxyURLPathGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reverse_proxy_proxy__url_path__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReverseProxyProxyURLPathHead reverses proxy
*/
func (a *Client) ReverseProxyProxyURLPathHead(params *ReverseProxyProxyURLPathHeadParams, opts ...ClientOption) (*ReverseProxyProxyURLPathHeadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReverseProxyProxyURLPathHeadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reverse_proxy_proxy__url_path__head",
		Method:             "HEAD",
		PathPattern:        "/proxy={url_path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReverseProxyProxyURLPathHeadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReverseProxyProxyURLPathHeadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reverse_proxy_proxy__url_path__head: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RobotsTxtRobotsTxtGet robots txt
*/
func (a *Client) RobotsTxtRobotsTxtGet(params *RobotsTxtRobotsTxtGetParams, opts ...ClientOption) (*RobotsTxtRobotsTxtGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRobotsTxtRobotsTxtGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "robots_txt_robots_txt_get",
		Method:             "GET",
		PathPattern:        "/robots.txt",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RobotsTxtRobotsTxtGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RobotsTxtRobotsTxtGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for robots_txt_robots_txt_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoopImageRoopImagePost roops image
*/
func (a *Client) RoopImageRoopImagePost(params *RoopImageRoopImagePostParams, opts ...ClientOption) (*RoopImageRoopImagePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoopImageRoopImagePostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roop_image_roop_image_post",
		Method:             "POST",
		PathPattern:        "/roop/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RoopImageRoopImagePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoopImageRoopImagePostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roop_image_roop_image_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoopModelsRoopModelsGet roops models
*/
func (a *Client) RoopModelsRoopModelsGet(params *RoopModelsRoopModelsGetParams, opts ...ClientOption) (*RoopModelsRoopModelsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRoopModelsRoopModelsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "roop_models_roop_models_get",
		Method:             "GET",
		PathPattern:        "/roop/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RoopModelsRoopModelsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoopModelsRoopModelsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for roop_models_roop_models_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGet searches by substr
*/
func (a *Client) SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGet(params *SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetParams, opts ...ClientOption) (*SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search_by_substr_infinite_image_browsing_db_search_by_substr_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/db/search_by_substr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchBySubstrInfiniteImageBrowsingDbSearchBySubstrGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search_by_substr_infinite_image_browsing_db_search_by_substr_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetConfigSdapiV1OptionsPost sets config
*/
func (a *Client) SetConfigSdapiV1OptionsPost(params *SetConfigSdapiV1OptionsPostParams, opts ...ClientOption) (*SetConfigSdapiV1OptionsPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetConfigSdapiV1OptionsPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "set_config_sdapi_v1_options_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/options",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetConfigSdapiV1OptionsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetConfigSdapiV1OptionsPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for set_config_sdapi_v1_options_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SettingsControlnetSettingsGet settings
*/
func (a *Client) SettingsControlnetSettingsGet(params *SettingsControlnetSettingsGetParams, opts ...ClientOption) (*SettingsControlnetSettingsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSettingsControlnetSettingsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "settings_controlnet_settings_get",
		Method:             "GET",
		PathPattern:        "/controlnet/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SettingsControlnetSettingsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SettingsControlnetSettingsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for settings_controlnet_settings_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ShutdownAppInfiniteImageBrowsingShutdownPost shutdowns app
*/
func (a *Client) ShutdownAppInfiniteImageBrowsingShutdownPost(params *ShutdownAppInfiniteImageBrowsingShutdownPostParams, opts ...ClientOption) (*ShutdownAppInfiniteImageBrowsingShutdownPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShutdownAppInfiniteImageBrowsingShutdownPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "shutdown_app_infinite_image_browsing_shutdown_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ShutdownAppInfiniteImageBrowsingShutdownPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ShutdownAppInfiniteImageBrowsingShutdownPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for shutdown_app_infinite_image_browsing_shutdown_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SkipSdapiV1SkipPost skips
*/
func (a *Client) SkipSdapiV1SkipPost(params *SkipSdapiV1SkipPostParams, opts ...ClientOption) (*SkipSdapiV1SkipPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSkipSdapiV1SkipPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "skip_sdapi_v1_skip_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/skip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SkipSdapiV1SkipPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SkipSdapiV1SkipPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for skip_sdapi_v1_skip_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartupEventsStartupEventsGet startups events
*/
func (a *Client) StartupEventsStartupEventsGet(params *StartupEventsStartupEventsGetParams, opts ...ClientOption) (*StartupEventsStartupEventsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartupEventsStartupEventsGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "startup_events_startup_events_get",
		Method:             "GET",
		PathPattern:        "/startup-events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartupEventsStartupEventsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartupEventsStartupEventsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startup_events_startup_events_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StaticResourceStaticPathGet statics resource
*/
func (a *Client) StaticResourceStaticPathGet(params *StaticResourceStaticPathGetParams, opts ...ClientOption) (*StaticResourceStaticPathGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStaticResourceStaticPathGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "static_resource_static__path__get",
		Method:             "GET",
		PathPattern:        "/static/{path}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StaticResourceStaticPathGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StaticResourceStaticPathGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for static_resource_static__path__get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
T2vAPIVersionT2vAPIVersionGet t2s v Api version
*/
func (a *Client) T2vAPIVersionT2vAPIVersionGet(params *T2vAPIVersionT2vAPIVersionGetParams, opts ...ClientOption) (*T2vAPIVersionT2vAPIVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewT2vAPIVersionT2vAPIVersionGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "t2v_api_version_t2v_api_version_get",
		Method:             "GET",
		PathPattern:        "/t2v/api_version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &T2vAPIVersionT2vAPIVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*T2vAPIVersionT2vAPIVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t2v_api_version_t2v_api_version_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
T2vVersionT2vVersionGet t2s v version
*/
func (a *Client) T2vVersionT2vVersionGet(params *T2vVersionT2vVersionGetParams, opts ...ClientOption) (*T2vVersionT2vVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewT2vVersionT2vVersionGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "t2v_version_t2v_version_get",
		Method:             "GET",
		PathPattern:        "/t2v/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &T2vVersionT2vVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*T2vVersionT2vVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for t2v_version_t2v_version_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Text2imgapiSdapiV1Txt2imgPost text2s imgapi
*/
func (a *Client) Text2imgapiSdapiV1Txt2imgPost(params *Text2imgapiSdapiV1Txt2imgPostParams, opts ...ClientOption) (*Text2imgapiSdapiV1Txt2imgPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewText2imgapiSdapiV1Txt2imgPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "text2imgapi_sdapi_v1_txt2img_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/txt2img",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &Text2imgapiSdapiV1Txt2imgPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*Text2imgapiSdapiV1Txt2imgPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for text2imgapi_sdapi_v1_txt2img_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ThemeCSSThemeCSSGet themes Css
*/
func (a *Client) ThemeCSSThemeCSSGet(params *ThemeCSSThemeCSSGetParams, opts ...ClientOption) (*ThemeCSSThemeCSSGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThemeCSSThemeCSSGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "theme_css_theme_css_get",
		Method:             "GET",
		PathPattern:        "/theme.css",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThemeCSSThemeCSSGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThemeCSSThemeCSSGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for theme_css_theme_css_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ThumbnailInfiniteImageBrowsingImageThumbnailGet thumbnails
*/
func (a *Client) ThumbnailInfiniteImageBrowsingImageThumbnailGet(params *ThumbnailInfiniteImageBrowsingImageThumbnailGetParams, opts ...ClientOption) (*ThumbnailInfiniteImageBrowsingImageThumbnailGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewThumbnailInfiniteImageBrowsingImageThumbnailGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "thumbnail_infinite_image_browsing_image_thumbnail_get",
		Method:             "GET",
		PathPattern:        "/infinite_image_browsing/image-thumbnail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ThumbnailInfiniteImageBrowsingImageThumbnailGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ThumbnailInfiniteImageBrowsingImageThumbnailGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for thumbnail_infinite_image_browsing_image_thumbnail_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPost toggles custom tag to img
*/
func (a *Client) ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPost(params *ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostParams, opts ...ClientOption) (*ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "toggle_custom_tag_to_img_infinite_image_browsing_db_toggle_custom_tag_to_img_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/toggle_custom_tag_to_img",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ToggleCustomTagToImgInfiniteImageBrowsingDbToggleCustomTagToImgPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for toggle_custom_tag_to_img_infinite_image_browsing_db_toggle_custom_tag_to_img_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrainEmbeddingSdapiV1TrainEmbeddingPost trains embedding
*/
func (a *Client) TrainEmbeddingSdapiV1TrainEmbeddingPost(params *TrainEmbeddingSdapiV1TrainEmbeddingPostParams, opts ...ClientOption) (*TrainEmbeddingSdapiV1TrainEmbeddingPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainEmbeddingSdapiV1TrainEmbeddingPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "train_embedding_sdapi_v1_train_embedding_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/train/embedding",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TrainEmbeddingSdapiV1TrainEmbeddingPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainEmbeddingSdapiV1TrainEmbeddingPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for train_embedding_sdapi_v1_train_embedding_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TrainHypernetworkSdapiV1TrainHypernetworkPost trains hypernetwork
*/
func (a *Client) TrainHypernetworkSdapiV1TrainHypernetworkPost(params *TrainHypernetworkSdapiV1TrainHypernetworkPostParams, opts ...ClientOption) (*TrainHypernetworkSdapiV1TrainHypernetworkPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTrainHypernetworkSdapiV1TrainHypernetworkPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "train_hypernetwork_sdapi_v1_train_hypernetwork_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/train/hypernetwork",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TrainHypernetworkSdapiV1TrainHypernetworkPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TrainHypernetworkSdapiV1TrainHypernetworkPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for train_hypernetwork_sdapi_v1_train_hypernetwork_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnloadapiSdapiV1UnloadCheckpointPost unloadapis
*/
func (a *Client) UnloadapiSdapiV1UnloadCheckpointPost(params *UnloadapiSdapiV1UnloadCheckpointPostParams, opts ...ClientOption) (*UnloadapiSdapiV1UnloadCheckpointPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnloadapiSdapiV1UnloadCheckpointPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unloadapi_sdapi_v1_unload_checkpoint_post",
		Method:             "POST",
		PathPattern:        "/sdapi/v1/unload-checkpoint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnloadapiSdapiV1UnloadCheckpointPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnloadapiSdapiV1UnloadCheckpointPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unloadapi_sdapi_v1_unload_checkpoint_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPost updates image db data
*/
func (a *Client) UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPost(params *UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostParams, opts ...ClientOption) (*UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "update_image_db_data_infinite_image_browsing_db_update_image_data_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/db/update_image_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateImageDbDataInfiniteImageBrowsingDbUpdateImageDataPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for update_image_db_data_infinite_image_browsing_db_update_image_data_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VersionControlnetVersionGet versions
*/
func (a *Client) VersionControlnetVersionGet(params *VersionControlnetVersionGetParams, opts ...ClientOption) (*VersionControlnetVersionGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVersionControlnetVersionGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "version_controlnet_version_get",
		Method:             "GET",
		PathPattern:        "/controlnet/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VersionControlnetVersionGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VersionControlnetVersionGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for version_controlnet_version_get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ZipFilesInfiniteImageBrowsingZipPost zips files
*/
func (a *Client) ZipFilesInfiniteImageBrowsingZipPost(params *ZipFilesInfiniteImageBrowsingZipPostParams, opts ...ClientOption) (*ZipFilesInfiniteImageBrowsingZipPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewZipFilesInfiniteImageBrowsingZipPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "zip_files_infinite_image_browsing_zip_post",
		Method:             "POST",
		PathPattern:        "/infinite_image_browsing/zip",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ZipFilesInfiniteImageBrowsingZipPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ZipFilesInfiniteImageBrowsingZipPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for zip_files_infinite_image_browsing_zip_post: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
