// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLoginLoginPostParams creates a new LoginLoginPostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLoginLoginPostParams() *LoginLoginPostParams {
	return &LoginLoginPostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLoginLoginPostParamsWithTimeout creates a new LoginLoginPostParams object
// with the ability to set a timeout on a request.
func NewLoginLoginPostParamsWithTimeout(timeout time.Duration) *LoginLoginPostParams {
	return &LoginLoginPostParams{
		timeout: timeout,
	}
}

// NewLoginLoginPostParamsWithContext creates a new LoginLoginPostParams object
// with the ability to set a context for a request.
func NewLoginLoginPostParamsWithContext(ctx context.Context) *LoginLoginPostParams {
	return &LoginLoginPostParams{
		Context: ctx,
	}
}

// NewLoginLoginPostParamsWithHTTPClient creates a new LoginLoginPostParams object
// with the ability to set a custom HTTPClient for a request.
func NewLoginLoginPostParamsWithHTTPClient(client *http.Client) *LoginLoginPostParams {
	return &LoginLoginPostParams{
		HTTPClient: client,
	}
}

/*
LoginLoginPostParams contains all the parameters to send to the API endpoint

	for the login login post operation.

	Typically these are written to a http.Request.
*/
type LoginLoginPostParams struct {

	// ClientID.
	ClientID *string

	// ClientSecret.
	ClientSecret *string

	// GrantType.
	GrantType *string

	// Password.
	Password string

	// Scope.
	Scope *string

	// Username.
	Username string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the login login post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoginLoginPostParams) WithDefaults() *LoginLoginPostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the login login post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LoginLoginPostParams) SetDefaults() {
	var (
		scopeDefault = string("")
	)

	val := LoginLoginPostParams{
		Scope: &scopeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the login login post params
func (o *LoginLoginPostParams) WithTimeout(timeout time.Duration) *LoginLoginPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login login post params
func (o *LoginLoginPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login login post params
func (o *LoginLoginPostParams) WithContext(ctx context.Context) *LoginLoginPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login login post params
func (o *LoginLoginPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login login post params
func (o *LoginLoginPostParams) WithHTTPClient(client *http.Client) *LoginLoginPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login login post params
func (o *LoginLoginPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the login login post params
func (o *LoginLoginPostParams) WithClientID(clientID *string) *LoginLoginPostParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the login login post params
func (o *LoginLoginPostParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithClientSecret adds the clientSecret to the login login post params
func (o *LoginLoginPostParams) WithClientSecret(clientSecret *string) *LoginLoginPostParams {
	o.SetClientSecret(clientSecret)
	return o
}

// SetClientSecret adds the clientSecret to the login login post params
func (o *LoginLoginPostParams) SetClientSecret(clientSecret *string) {
	o.ClientSecret = clientSecret
}

// WithGrantType adds the grantType to the login login post params
func (o *LoginLoginPostParams) WithGrantType(grantType *string) *LoginLoginPostParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the login login post params
func (o *LoginLoginPostParams) SetGrantType(grantType *string) {
	o.GrantType = grantType
}

// WithPassword adds the password to the login login post params
func (o *LoginLoginPostParams) WithPassword(password string) *LoginLoginPostParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the login login post params
func (o *LoginLoginPostParams) SetPassword(password string) {
	o.Password = password
}

// WithScope adds the scope to the login login post params
func (o *LoginLoginPostParams) WithScope(scope *string) *LoginLoginPostParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the login login post params
func (o *LoginLoginPostParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithUsername adds the username to the login login post params
func (o *LoginLoginPostParams) WithUsername(username string) *LoginLoginPostParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the login login post params
func (o *LoginLoginPostParams) SetUsername(username string) {
	o.Username = username
}

// WriteToRequest writes these params to a swagger request
func (o *LoginLoginPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// form param client_id
		var frClientID string
		if o.ClientID != nil {
			frClientID = *o.ClientID
		}
		fClientID := frClientID
		if fClientID != "" {
			if err := r.SetFormParam("client_id", fClientID); err != nil {
				return err
			}
		}
	}

	if o.ClientSecret != nil {

		// form param client_secret
		var frClientSecret string
		if o.ClientSecret != nil {
			frClientSecret = *o.ClientSecret
		}
		fClientSecret := frClientSecret
		if fClientSecret != "" {
			if err := r.SetFormParam("client_secret", fClientSecret); err != nil {
				return err
			}
		}
	}

	if o.GrantType != nil {

		// form param grant_type
		var frGrantType string
		if o.GrantType != nil {
			frGrantType = *o.GrantType
		}
		fGrantType := frGrantType
		if fGrantType != "" {
			if err := r.SetFormParam("grant_type", fGrantType); err != nil {
				return err
			}
		}
	}

	// form param password
	frPassword := o.Password
	fPassword := frPassword
	if fPassword != "" {
		if err := r.SetFormParam("password", fPassword); err != nil {
			return err
		}
	}

	if o.Scope != nil {

		// form param scope
		var frScope string
		if o.Scope != nil {
			frScope = *o.Scope
		}
		fScope := frScope
		if fScope != "" {
			if err := r.SetFormParam("scope", fScope); err != nil {
				return err
			}
		}
	}

	// form param username
	frUsername := o.Username
	fUsername := frUsername
	if fUsername != "" {
		if err := r.SetFormParam("username", fUsername); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
