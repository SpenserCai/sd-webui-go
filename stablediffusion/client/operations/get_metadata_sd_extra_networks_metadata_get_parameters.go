// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMetadataSdExtraNetworksMetadataGetParams creates a new GetMetadataSdExtraNetworksMetadataGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMetadataSdExtraNetworksMetadataGetParams() *GetMetadataSdExtraNetworksMetadataGetParams {
	return &GetMetadataSdExtraNetworksMetadataGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMetadataSdExtraNetworksMetadataGetParamsWithTimeout creates a new GetMetadataSdExtraNetworksMetadataGetParams object
// with the ability to set a timeout on a request.
func NewGetMetadataSdExtraNetworksMetadataGetParamsWithTimeout(timeout time.Duration) *GetMetadataSdExtraNetworksMetadataGetParams {
	return &GetMetadataSdExtraNetworksMetadataGetParams{
		timeout: timeout,
	}
}

// NewGetMetadataSdExtraNetworksMetadataGetParamsWithContext creates a new GetMetadataSdExtraNetworksMetadataGetParams object
// with the ability to set a context for a request.
func NewGetMetadataSdExtraNetworksMetadataGetParamsWithContext(ctx context.Context) *GetMetadataSdExtraNetworksMetadataGetParams {
	return &GetMetadataSdExtraNetworksMetadataGetParams{
		Context: ctx,
	}
}

// NewGetMetadataSdExtraNetworksMetadataGetParamsWithHTTPClient creates a new GetMetadataSdExtraNetworksMetadataGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMetadataSdExtraNetworksMetadataGetParamsWithHTTPClient(client *http.Client) *GetMetadataSdExtraNetworksMetadataGetParams {
	return &GetMetadataSdExtraNetworksMetadataGetParams{
		HTTPClient: client,
	}
}

/*
GetMetadataSdExtraNetworksMetadataGetParams contains all the parameters to send to the API endpoint

	for the get metadata sd extra networks metadata get operation.

	Typically these are written to a http.Request.
*/
type GetMetadataSdExtraNetworksMetadataGetParams struct {

	// Item.
	Item *string

	// Page.
	Page *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get metadata sd extra networks metadata get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithDefaults() *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get metadata sd extra networks metadata get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetDefaults() {
	var (
		itemDefault = string("")

		pageDefault = string("")
	)

	val := GetMetadataSdExtraNetworksMetadataGetParams{
		Item: &itemDefault,
		Page: &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithTimeout(timeout time.Duration) *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithContext(ctx context.Context) *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithHTTPClient(client *http.Client) *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItem adds the item to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithItem(item *string) *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetItem(item)
	return o
}

// SetItem adds the item to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetItem(item *string) {
	o.Item = item
}

// WithPage adds the page to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WithPage(page *string) *GetMetadataSdExtraNetworksMetadataGetParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get metadata sd extra networks metadata get params
func (o *GetMetadataSdExtraNetworksMetadataGetParams) SetPage(page *string) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *GetMetadataSdExtraNetworksMetadataGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Item != nil {

		// query param item
		var qrItem string

		if o.Item != nil {
			qrItem = *o.Item
		}
		qItem := qrItem
		if qItem != "" {

			if err := r.SetQueryParam("item", qItem); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
