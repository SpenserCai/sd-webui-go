// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaskItem MaskItem
//
// swagger:model MaskItem
type MaskItem struct {

	// Area
	// Required: true
	Area *int64 `json:"area"`

	// Bbox
	// Required: true
	Bbox []int64 `json:"bbox"`

	// Crop Box
	// Required: true
	CropBox []int64 `json:"crop_box"`

	// Point Coords
	// Required: true
	PointCoords [][]float64 `json:"point_coords"`

	// Predicted Iou
	// Required: true
	PredictedIou *float64 `json:"predicted_iou"`

	// Segmentation
	// Required: true
	Segmentation []int64 `json:"segmentation"`

	// Stability Score
	// Required: true
	StabilityScore *float64 `json:"stability_score"`
}

// Validate validates this mask item
func (m *MaskItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArea(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBbox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCropBox(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePointCoords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredictedIou(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStabilityScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MaskItem) validateArea(formats strfmt.Registry) error {

	if err := validate.Required("area", "body", m.Area); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validateBbox(formats strfmt.Registry) error {

	if err := validate.Required("bbox", "body", m.Bbox); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validateCropBox(formats strfmt.Registry) error {

	if err := validate.Required("crop_box", "body", m.CropBox); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validatePointCoords(formats strfmt.Registry) error {

	if err := validate.Required("point_coords", "body", m.PointCoords); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validatePredictedIou(formats strfmt.Registry) error {

	if err := validate.Required("predicted_iou", "body", m.PredictedIou); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validateSegmentation(formats strfmt.Registry) error {

	if err := validate.Required("segmentation", "body", m.Segmentation); err != nil {
		return err
	}

	return nil
}

func (m *MaskItem) validateStabilityScore(formats strfmt.Registry) error {

	if err := validate.Required("stability_score", "body", m.StabilityScore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mask item based on context it is used
func (m *MaskItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MaskItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaskItem) UnmarshalBinary(b []byte) error {
	var res MaskItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
