// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Estimation Estimation
//
// swagger:model Estimation
type Estimation struct {

	// Avg Event Concurrent Process Time
	AvgEventConcurrentProcessTime float64 `json:"avg_event_concurrent_process_time,omitempty"`

	// Avg Event Process Time
	AvgEventProcessTime float64 `json:"avg_event_process_time,omitempty"`

	// Msg
	Msg *string `json:"msg,omitempty"`

	// Queue Eta
	// Required: true
	QueueEta *float64 `json:"queue_eta"`

	// Queue Size
	// Required: true
	QueueSize *int64 `json:"queue_size"`

	// Rank
	Rank int64 `json:"rank,omitempty"`

	// Rank Eta
	RankEta float64 `json:"rank_eta,omitempty"`
}

// Validate validates this estimation
func (m *Estimation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueueEta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueueSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Estimation) validateQueueEta(formats strfmt.Registry) error {

	if err := validate.Required("queue_eta", "body", m.QueueEta); err != nil {
		return err
	}

	return nil
}

func (m *Estimation) validateQueueSize(formats strfmt.Registry) error {

	if err := validate.Required("queue_size", "body", m.QueueSize); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this estimation based on context it is used
func (m *Estimation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Estimation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Estimation) UnmarshalBinary(b []byte) error {
	var res Estimation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
