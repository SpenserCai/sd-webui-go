// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModulesProgressProgressResponse ProgressResponse
//
// swagger:model modules__progress__ProgressResponse
type ModulesProgressProgressResponse struct {

	// Whether the task is being worked on right now
	// Required: true
	Active *bool `json:"active"`

	// Whether the task has already finished
	// Required: true
	Completed *bool `json:"completed"`

	// ETA in secs
	Eta float64 `json:"eta,omitempty"`

	// Live preview image ID
	//
	// Send this together with next request to prevent receiving same image
	IDLivePreview int64 `json:"id_live_preview,omitempty"`

	// Live preview image
	//
	// Current live preview; a data: uri
	LivePreview string `json:"live_preview,omitempty"`

	// Progress
	//
	// The progress with a range of 0 to 1
	Progress float64 `json:"progress,omitempty"`

	// Whether the task is in queue
	// Required: true
	Queued *bool `json:"queued"`

	// Info text
	//
	// Info text used by WebUI.
	Textinfo string `json:"textinfo,omitempty"`
}

// Validate validates this modules progress progress response
func (m *ModulesProgressProgressResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueued(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModulesProgressProgressResponse) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *ModulesProgressProgressResponse) validateCompleted(formats strfmt.Registry) error {

	if err := validate.Required("completed", "body", m.Completed); err != nil {
		return err
	}

	return nil
}

func (m *ModulesProgressProgressResponse) validateQueued(formats strfmt.Registry) error {

	if err := validate.Required("queued", "body", m.Queued); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this modules progress progress response based on context it is used
func (m *ModulesProgressProgressResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ModulesProgressProgressResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModulesProgressProgressResponse) UnmarshalBinary(b []byte) error {
	var res ModulesProgressProgressResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
