// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmbeddingItem EmbeddingItem
//
// swagger:model EmbeddingItem
type EmbeddingItem struct {

	// SD Checkpoint
	//
	// The hash of the checkpoint this embedding was trained on, if available
	SdCheckpoint string `json:"sd_checkpoint,omitempty"`

	// SD Checkpoint Name
	//
	// The name of the checkpoint this embedding was trained on, if available. Note that this is the name that was used by the trainer; for a stable identifier, use `sd_checkpoint` instead
	SdCheckpointName string `json:"sd_checkpoint_name,omitempty"`

	// Shape
	//
	// The length of each individual vector in the embedding
	// Required: true
	Shape *int64 `json:"shape"`

	// Step
	//
	// The number of steps that were used to train this embedding, if available
	Step int64 `json:"step,omitempty"`

	// Vectors
	//
	// The number of vectors in the embedding
	// Required: true
	Vectors *int64 `json:"vectors"`
}

// Validate validates this embedding item
func (m *EmbeddingItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShape(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVectors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbeddingItem) validateShape(formats strfmt.Registry) error {

	if err := validate.Required("shape", "body", m.Shape); err != nil {
		return err
	}

	return nil
}

func (m *EmbeddingItem) validateVectors(formats strfmt.Registry) error {

	if err := validate.Required("vectors", "body", m.Vectors); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this embedding item based on context it is used
func (m *EmbeddingItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EmbeddingItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbeddingItem) UnmarshalBinary(b []byte) error {
	var res EmbeddingItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
