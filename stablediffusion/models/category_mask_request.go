// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CategoryMaskRequest CategoryMaskRequest
//
// swagger:model CategoryMaskRequest
type CategoryMaskRequest struct {

	// Category
	// Required: true
	Category *string `json:"category"`

	// Input Image
	// Required: true
	InputImage *string `json:"input_image"`

	// Pixel Perfect
	PixelPerfect *bool `json:"pixel_perfect,omitempty"`

	// Processor
	Processor *string `json:"processor,omitempty"`

	// Processor Res
	ProcessorRes *int64 `json:"processor_res,omitempty"`

	// Resize Mode
	ResizeMode *int64 `json:"resize_mode,omitempty"`

	// Sam Model Name
	SamModelName *string `json:"sam_model_name,omitempty"`

	// Target H
	TargetH int64 `json:"target_H,omitempty"`

	// Target W
	TargetW int64 `json:"target_W,omitempty"`
}

// Validate validates this category mask request
func (m *CategoryMaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputImage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CategoryMaskRequest) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *CategoryMaskRequest) validateInputImage(formats strfmt.Registry) error {

	if err := validate.Required("input_image", "body", m.InputImage); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this category mask request based on context it is used
func (m *CategoryMaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CategoryMaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CategoryMaskRequest) UnmarshalBinary(b []byte) error {
	var res CategoryMaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
