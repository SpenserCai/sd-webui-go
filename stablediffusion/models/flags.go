// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Flags Flags
//
// swagger:model Flags
type Flags struct {

	// Ad No Huggingface
	//
	// Don't use adetailer models from huggingface
	AdNoHuggingface *bool `json:"ad_no_huggingface,omitempty"`

	// Add Stop Route
	//
	// add /_stop route to stop server
	AddStopRoute *bool `json:"add_stop_route,omitempty"`

	// Addnet Max Model Count
	//
	// The maximum number of additional network model can be used.
	AddnetMaxModelCount *int64 `json:"addnet_max_model_count,omitempty"`

	// Administrator
	//
	// Administrator rights
	Administrator *bool `json:"administrator,omitempty"`

	// Allow Code
	//
	// allow custom script execution from webui
	AllowCode *bool `json:"allow_code,omitempty"`

	// Always Batch Cond Uncond
	//
	// disables cond/uncond batching that is enabled to save memory with --medvram or --lowvram
	AlwaysBatchCondUncond *bool `json:"always_batch_cond_uncond,omitempty"`

	// Api
	//
	// use api=True to launch the API together with the webui (use --nowebui instead for only the API)
	API *bool `json:"api,omitempty"`

	// Api Auth
	//
	// Set authentication for API like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
	APIAuth string `json:"api_auth,omitempty"`

	// Api Log
	//
	// use api-log=True to enable logging of all API requests
	APILog *bool `json:"api_log,omitempty"`

	// Api Server Stop
	//
	// enable server stop/restart/kill via api
	APIServerStop *bool `json:"api_server_stop,omitempty"`

	// Autolaunch
	//
	// open the webui URL in the system's default browser upon launch
	Autolaunch *bool `json:"autolaunch,omitempty"`

	// Bsrgan Models Path
	//
	// Path to directory with BSRGAN model file(s).
	BsrganModelsPath *string `json:"bsrgan_models_path,omitempty"`

	// Ckpt
	//
	// path to checkpoint of stable diffusion model; if specified, this checkpoint will be added to the list of checkpoints and loaded
	Ckpt *string `json:"ckpt,omitempty"`

	// Ckpt Dir
	//
	// Path to directory with stable diffusion checkpoints
	CkptDir string `json:"ckpt_dir,omitempty"`

	// Ckptfix
	//
	// (Dreambooth) Enable fix for OOM errors when extracting checkpoints.
	Ckptfix *bool `json:"ckptfix,omitempty"`

	// Clip Models Path
	//
	// Path to directory with CLIP model file(s).
	ClipModelsPath string `json:"clip_models_path,omitempty"`

	// Codeformer Models Path
	//
	// Path to directory with codeformer model file(s).
	CodeformerModelsPath *string `json:"codeformer_models_path,omitempty"`

	// Config
	//
	// path to config which constructs model
	Config *string `json:"config,omitempty"`

	// Controlnet Annotator Models Path
	//
	// Path to directory with annotator model directories
	ControlnetAnnotatorModelsPath string `json:"controlnet_annotator_models_path,omitempty"`

	// Controlnet Dir
	//
	// Path to directory with ControlNet models
	ControlnetDir string `json:"controlnet_dir,omitempty"`

	// Controlnet Loglevel
	//
	// Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
	ControlnetLoglevel *string `json:"controlnet_loglevel,omitempty"`

	// Controlnet Preprocessor Cache Size
	//
	// Cache size for controlnet preprocessor results
	ControlnetPreprocessorCacheSize *int64 `json:"controlnet_preprocessor_cache_size,omitempty"`

	// Cors Allow Origins
	//
	// Allowed CORS origin(s) in the form of a comma-separated list (no spaces)
	CorsAllowOrigins string `json:"cors_allow_origins,omitempty"`

	// Cors Allow Origins Regex
	//
	// Allowed CORS origin(s) in the form of a single regular expression
	CorsAllowOriginsRegex string `json:"cors_allow_origins_regex,omitempty"`

	// Data Dir
	//
	// base path where all user data is stored
	DataDir *string `json:"data_dir,omitempty"`

	// Debug Db
	//
	// Set this to enable memory logging. For science only.
	DebugDb *bool `json:"debug_db,omitempty"`

	// Deepdanbooru
	//
	// does not do anything
	Deepdanbooru *bool `json:"deepdanbooru,omitempty"`

	// Device Id
	//
	// Select the default CUDA device to use (export CUDA_VISIBLE_DEVICES=0,1,etc might be needed before)
	DeviceID string `json:"device_id,omitempty"`

	// Disable Console Progressbars
	//
	// do not output progressbars to console
	DisableConsoleProgressbars *bool `json:"disable_console_progressbars,omitempty"`

	// Disable Nan Check
	//
	// do not check if produced images/latent spaces have nans; useful for running without a checkpoint in CI
	DisableNanCheck *bool `json:"disable_nan_check,omitempty"`

	// Disable Opt Split Attention
	//
	// prefer no cross-attention layer optimization for automatic choice of optimization
	DisableOptSplitAttention *bool `json:"disable_opt_split_attention,omitempty"`

	// Disable Safe Unpickle
	//
	// disable checking pytorch models for malicious code
	DisableSafeUnpickle *bool `json:"disable_safe_unpickle,omitempty"`

	// Disable Tls Verify
	//
	// When passed, enables the use of self-signed certificates.
	DisableTLSVerify string `json:"disable_tls_verify,omitempty"`

	// Do Not Download Clip
	//
	// do not download CLIP model even if it's not included in the checkpoint
	DoNotDownloadClip *bool `json:"do_not_download_clip,omitempty"`

	// Dreambooth Models Path
	//
	// Path to directory to store Dreambooth model file(s).
	DreamboothModelsPath string `json:"dreambooth_models_path,omitempty"`

	// Embeddings Dir
	//
	// embeddings directory for textual inversion (default: embeddings)
	EmbeddingsDir *string `json:"embeddings_dir,omitempty"`

	// Enable Console Prompts
	//
	// print prompts to console when generating with txt2img and img2img
	EnableConsolePrompts *bool `json:"enable_console_prompts,omitempty"`

	// Enable Insecure Extension Access
	//
	// enable extensions tab regardless of other options
	EnableInsecureExtensionAccess *bool `json:"enable_insecure_extension_access,omitempty"`

	// Esrgan Models Path
	//
	// Path to directory with ESRGAN model file(s).
	EsrganModelsPath *string `json:"esrgan_models_path,omitempty"`

	// F
	//
	// ==SUPPRESS==
	F *bool `json:"f,omitempty"`

	// Force Cpu
	//
	// (Dreambooth) Train using CPU only.
	ForceCPU *bool `json:"force_cpu,omitempty"`

	// Force Enable Xformers
	//
	// enable xformers for cross attention layers regardless of whether the checking code thinks you can run it; do not make bug reports if this fails to work
	ForceEnableXformers *bool `json:"force_enable_xformers,omitempty"`

	// Freeze Settings
	//
	// disable editing settings
	FreezeSettings *bool `json:"freeze_settings,omitempty"`

	// Gfpgan Dir
	//
	// GFPGAN directory
	GfpganDir *string `json:"gfpgan_dir,omitempty"`

	// Gfpgan Model
	//
	// GFPGAN model file name
	GfpganModel string `json:"gfpgan_model,omitempty"`

	// Gfpgan Models Path
	//
	// Path to directory with GFPGAN model file(s).
	GfpganModelsPath *string `json:"gfpgan_models_path,omitempty"`

	// Gradio Allowed Path
	//
	// add path to gradio's allowed_paths, make it possible to serve files from it
	GradioAllowedPath string `json:"gradio_allowed_path,omitempty"`

	// Gradio Auth
	//
	// set gradio authentication like "username:password"; or comma-delimit multiple like "u1:p1,u2:p2,u3:p3"
	GradioAuth string `json:"gradio_auth,omitempty"`

	// Gradio Auth Path
	//
	// set gradio authentication file path ex. "/path/to/auth/file" same auth format as --gradio-auth
	GradioAuthPath string `json:"gradio_auth_path,omitempty"`

	// Gradio Debug
	//
	// launch gradio with --debug option
	GradioDebug *bool `json:"gradio_debug,omitempty"`

	// Gradio Img2Img Tool
	//
	// does not do anything
	GradioImg2imgTool string `json:"gradio_img2img_tool,omitempty"`

	// Gradio Inpaint Tool
	//
	// does not do anything
	GradioInpaintTool string `json:"gradio_inpaint_tool,omitempty"`

	// Gradio Queue
	//
	// does not do anything
	GradioQueue *bool `json:"gradio_queue,omitempty"`

	// Hide Ui Dir Config
	//
	// hide directory configuration from webui
	HideUIDirConfig *bool `json:"hide_ui_dir_config,omitempty"`

	// Hypernetwork Dir
	//
	// hypernetwork directory
	HypernetworkDir *string `json:"hypernetwork_dir,omitempty"`

	// Ldsr Models Path
	//
	// Path to directory with LDSR model file(s).
	LdsrModelsPath *string `json:"ldsr_models_path,omitempty"`

	// Listen
	//
	// launch gradio with 0.0.0.0 as server name, allowing to respond to network requests
	Listen *bool `json:"listen,omitempty"`

	// Localizations Dir
	//
	// localizations directory
	LocalizationsDir *string `json:"localizations_dir,omitempty"`

	// Lora Dir
	//
	// Path to directory with Lora networks.
	LoraDir *string `json:"lora_dir,omitempty"`

	// Lora Models Path
	//
	// Path to directory to store Lora model file(s).
	LoraModelsPath string `json:"lora_models_path,omitempty"`

	// Lowram
	//
	// load stable diffusion checkpoint weights to VRAM instead of RAM
	Lowram *bool `json:"lowram,omitempty"`

	// Lowvram
	//
	// enable stable diffusion model optimizations for sacrificing a lot of speed for very low VRM usage
	Lowvram *bool `json:"lowvram,omitempty"`

	// Lyco Debug
	//
	// Print extra info when using lycoris model
	LycoDebug *bool `json:"lyco_debug,omitempty"`

	// Lyco Dir
	//
	// Path to directory with LyCORIS networks.
	LycoDir *string `json:"lyco_dir,omitempty"`

	// Lyco Dir Backcompat
	//
	// Path to directory with LyCORIS networks (for backawards compatibility; can also use --lyco-dir).
	LycoDirBackcompat *string `json:"lyco_dir_backcompat,omitempty"`

	// Lyco Patch Lora
	//
	// Patch the built-in lora. Will use the lora_dir and <lora> format, but disable the <lyco> format.
	LycoPatchLora *bool `json:"lyco_patch_lora,omitempty"`

	// Max Batch Count
	//
	// maximum batch count value for the UI
	MaxBatchCount *int64 `json:"max_batch_count,omitempty"`

	// Medvram
	//
	// enable stable diffusion model optimizations for sacrificing a little speed for low VRM usage
	Medvram *bool `json:"medvram,omitempty"`

	// Ngrok
	//
	// ngrok authtoken, alternative to gradio --share
	Ngrok string `json:"ngrok,omitempty"`

	// Ngrok Options
	//
	// The options to pass to ngrok in JSON format, e.g.: '{"authtoken_from_env":true, "basic_auth":"user:password", "oauth_provider":"google", "oauth_allow_emails":"user@asdf.com"}'
	NgrokOptions interface{} `json:"ngrok_options,omitempty"`

	// Ngrok Region
	//
	// does not do anything.
	NgrokRegion string `json:"ngrok_region,omitempty"`

	// No Download Sd Model
	//
	// don't download SD1.5 model even if no model is found in --ckpt-dir
	NoDownloadSdModel *bool `json:"no_download_sd_model,omitempty"`

	// No Gradio Queue
	//
	// Disables gradio queue; causes the webpage to use http requests instead of websockets; was the defaul in earlier versions
	NoGradioQueue *bool `json:"no_gradio_queue,omitempty"`

	// No Half
	//
	// do not switch the model to 16-bit floats
	NoHalf *bool `json:"no_half,omitempty"`

	// No Half Controlnet
	//
	// do not switch the ControlNet models to 16-bit floats (only needed without --no-half)
	NoHalfControlnet string `json:"no_half_controlnet,omitempty"`

	// No Half Vae
	//
	// do not switch the VAE model to 16-bit floats
	NoHalfVae *bool `json:"no_half_vae,omitempty"`

	// No Hashing
	//
	// disable sha256 hashing of checkpoints to help loading performance
	NoHashing *bool `json:"no_hashing,omitempty"`

	// No Progressbar Hiding
	//
	// do not hide progressbar in gradio UI (we hide it because it slows down ML if you have hardware acceleration in browser)
	NoProgressbarHiding *bool `json:"no_progressbar_hiding,omitempty"`

	// Nowebui
	//
	// use api=True to launch the API instead of the webui
	Nowebui *bool `json:"nowebui,omitempty"`

	// Opt Channelslast
	//
	// change memory type for stable diffusion to channels last
	OptChannelslast *bool `json:"opt_channelslast,omitempty"`

	// Opt Sdp Attention
	//
	// prefer scaled dot product cross-attention layer optimization for automatic choice of optimization; requires PyTorch 2.*
	OptSdpAttention *bool `json:"opt_sdp_attention,omitempty"`

	// Opt Sdp No Mem Attention
	//
	// prefer scaled dot product cross-attention layer optimization without memory efficient attention for automatic choice of optimization, makes image generation deterministic; requires PyTorch 2.*
	OptSdpNoMemAttention *bool `json:"opt_sdp_no_mem_attention,omitempty"`

	// Opt Split Attention
	//
	// prefer Doggettx's cross-attention layer optimization for automatic choice of optimization
	OptSplitAttention *bool `json:"opt_split_attention,omitempty"`

	// Opt Split Attention Invokeai
	//
	// prefer InvokeAI's cross-attention layer optimization for automatic choice of optimization
	OptSplitAttentionInvokeai *bool `json:"opt_split_attention_invokeai,omitempty"`

	// Opt Split Attention V1
	//
	// prefer older version of split attention optimization for automatic choice of optimization
	OptSplitAttentionV1 *bool `json:"opt_split_attention_v1,omitempty"`

	// Opt Sub Quad Attention
	//
	// prefer memory efficient sub-quadratic cross-attention layer optimization for automatic choice of optimization
	OptSubQuadAttention *bool `json:"opt_sub_quad_attention,omitempty"`

	// Port
	//
	// launch gradio with given server port, you need root/admin rights for ports < 1024, defaults to 7860 if available
	Port string `json:"port,omitempty"`

	// Precision
	//
	// evaluate at this precision
	Precision *string `json:"precision,omitempty"`

	// Profile Db
	//
	// Set this to enable memory profiling while training. For science only.
	ProfileDb *bool `json:"profile_db,omitempty"`

	// Realesrgan Models Path
	//
	// Path to directory with RealESRGAN model file(s).
	RealesrganModelsPath *string `json:"realesrgan_models_path,omitempty"`

	// Reinstall Torch
	//
	// launch.py argument: install the appropriate version of torch even if you have some version already installed
	ReinstallTorch *bool `json:"reinstall_torch,omitempty"`

	// Reinstall Xformers
	//
	// launch.py argument: install the appropriate version of xformers even if you have some version already installed
	ReinstallXformers *bool `json:"reinstall_xformers,omitempty"`

	// Scunet Models Path
	//
	// Path to directory with ScuNET model file(s).
	ScunetModelsPath *string `json:"scunet_models_path,omitempty"`

	// Server Name
	//
	// Sets hostname of server
	ServerName string `json:"server_name,omitempty"`

	// Share
	//
	// use share=True for gradio and make the UI accessible through their site
	Share *bool `json:"share,omitempty"`

	// Show Negative Prompt
	//
	// does not do anything
	ShowNegativePrompt *bool `json:"show_negative_prompt,omitempty"`

	// Skip Install
	//
	// launch.py argument: skip installation of packages
	SkipInstall *bool `json:"skip_install,omitempty"`

	// Skip Prepare Environment
	//
	// launch.py argument: skip all environment preparation
	SkipPrepareEnvironment *bool `json:"skip_prepare_environment,omitempty"`

	// Skip Python Version Check
	//
	// launch.py argument: do not check python version
	SkipPythonVersionCheck *bool `json:"skip_python_version_check,omitempty"`

	// Skip Torch Cuda Test
	//
	// launch.py argument: do not check if CUDA is able to work properly
	SkipTorchCudaTest *bool `json:"skip_torch_cuda_test,omitempty"`

	// Skip Version Check
	//
	// Do not check versions of torch and xformers
	SkipVersionCheck *bool `json:"skip_version_check,omitempty"`

	// Styles File
	//
	// filename to use for styles
	StylesFile *string `json:"styles_file,omitempty"`

	// Sub Quad Chunk Threshold
	//
	// the percentage of VRAM threshold for the sub-quadratic cross-attention layer optimization to use chunking
	SubQuadChunkThreshold string `json:"sub_quad_chunk_threshold,omitempty"`

	// Sub Quad Kv Chunk Size
	//
	// kv chunk size for the sub-quadratic cross-attention layer optimization to use
	SubQuadKvChunkSize string `json:"sub_quad_kv_chunk_size,omitempty"`

	// Sub Quad Q Chunk Size
	//
	// query chunk size for the sub-quadratic cross-attention layer optimization to use
	SubQuadqChunkSize *int64 `json:"sub_quad_q_chunk_size,omitempty"`

	// Subpath
	//
	// customize the subpath for gradio, use with reverse proxy
	Subpath string `json:"subpath,omitempty"`

	// Swinir Models Path
	//
	// Path to directory with SwinIR model file(s).
	SwinirModelsPath *string `json:"swinir_models_path,omitempty"`

	// Test Server
	//
	// launch.py argument: configure server for testing
	TestServer *bool `json:"test_server,omitempty"`

	// Textual Inversion Templates Dir
	//
	// directory with textual inversion templates
	TextualInversionTemplatesDir *string `json:"textual_inversion_templates_dir,omitempty"`

	// Theme
	//
	// launches the UI with light or dark theme
	Theme string `json:"theme,omitempty"`

	// Timeout Keep Alive
	//
	// set timeout_keep_alive for uvicorn
	TimeoutKeepAlive *int64 `json:"timeout_keep_alive,omitempty"`

	// Tls Certfile
	//
	// Partially enables TLS, requires --tls-keyfile to fully function
	TLSCertfile string `json:"tls_certfile,omitempty"`

	// Tls Keyfile
	//
	// Partially enables TLS, requires --tls-certfile to fully function
	TLSKeyfile string `json:"tls_keyfile,omitempty"`

	// Ui Config File
	//
	// filename to use for ui configuration
	UIConfigFile *string `json:"ui_config_file,omitempty"`

	// Ui Debug Mode
	//
	// Don't load model to quickly launch UI
	UIDebugMode *bool `json:"ui_debug_mode,omitempty"`

	// Ui Settings File
	//
	// filename to use for ui settings
	UISettingsFile *string `json:"ui_settings_file,omitempty"`

	// Unload Gfpgan
	//
	// does not do anything.
	UnloadGfpgan *bool `json:"unload_gfpgan,omitempty"`

	// Upcast Sampling
	//
	// upcast sampling. No effect with --no-half. Usually produces similar results to --no-half with better performance while using less memory.
	UpcastSampling *bool `json:"upcast_sampling,omitempty"`

	// Update All Extensions
	//
	// launch.py argument: download updates for all extensions when starting the program
	UpdateAllExtensions *bool `json:"update_all_extensions,omitempty"`

	// Update Check
	//
	// launch.py argument: check for updates at startup
	UpdateCheck *bool `json:"update_check,omitempty"`

	// Use Cpu
	//
	// use CPU as torch device for specified modules
	UseCPU []interface{} `json:"use_cpu"`

	// Use Textbox Seed
	//
	// use textbox for seeds in UI (no up/down, but possible to input long seeds)
	UseTextboxSeed *bool `json:"use_textbox_seed,omitempty"`

	// Vae Dir
	//
	// Path to directory with VAE files
	VaeDir string `json:"vae_dir,omitempty"`

	// Vae Path
	//
	// Checkpoint to use as VAE; setting this argument disables all settings related to VAE
	VaePath string `json:"vae_path,omitempty"`

	// Xformers
	//
	// enable xformers for cross attention layers
	Xformers *bool `json:"xformers,omitempty"`

	// Xformers Flash Attention
	//
	// enable xformers with Flash Attention to improve reproducibility (supported for SD2.x or variant only)
	XformersFlashAttention *bool `json:"xformers_flash_attention,omitempty"`
}

// Validate validates this flags
func (m *Flags) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this flags based on context it is used
func (m *Flags) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Flags) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Flags) UnmarshalBinary(b []byte) error {
	var res Flags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
