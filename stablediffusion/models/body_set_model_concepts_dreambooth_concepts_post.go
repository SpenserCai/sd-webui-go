// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BodySetModelConceptsDreamboothConceptsPost Body_set_model_concepts_dreambooth_concepts_post
//
// swagger:model Body_set_model_concepts_dreambooth_concepts_post
type BodySetModelConceptsDreamboothConceptsPost struct {

	// Api Key
	//
	// If an API key is set, this must be present.
	APIKey string `json:"api_key,omitempty"`

	// Concepts
	// Required: true
	Concepts []*Concept `json:"concepts"`

	// Model Name
	//
	// The model name to fetch config for.
	// Required: true
	ModelName *string `json:"model_name"`
}

// Validate validates this body set model concepts dreambooth concepts post
func (m *BodySetModelConceptsDreamboothConceptsPost) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConcepts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModelName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BodySetModelConceptsDreamboothConceptsPost) validateConcepts(formats strfmt.Registry) error {

	if err := validate.Required("concepts", "body", m.Concepts); err != nil {
		return err
	}

	for i := 0; i < len(m.Concepts); i++ {
		if swag.IsZero(m.Concepts[i]) { // not required
			continue
		}

		if m.Concepts[i] != nil {
			if err := m.Concepts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("concepts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("concepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BodySetModelConceptsDreamboothConceptsPost) validateModelName(formats strfmt.Registry) error {

	if err := validate.Required("model_name", "body", m.ModelName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this body set model concepts dreambooth concepts post based on the context it is used
func (m *BodySetModelConceptsDreamboothConceptsPost) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConcepts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BodySetModelConceptsDreamboothConceptsPost) contextValidateConcepts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Concepts); i++ {

		if m.Concepts[i] != nil {
			if err := m.Concepts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("concepts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("concepts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BodySetModelConceptsDreamboothConceptsPost) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BodySetModelConceptsDreamboothConceptsPost) UnmarshalBinary(b []byte) error {
	var res BodySetModelConceptsDreamboothConceptsPost
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
