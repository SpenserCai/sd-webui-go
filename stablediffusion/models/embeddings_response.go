// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmbeddingsResponse EmbeddingsResponse
//
// swagger:model EmbeddingsResponse
type EmbeddingsResponse struct {

	// Loaded
	//
	// Embeddings loaded for the current model
	// Required: true
	Loaded map[string]EmbeddingItem `json:"loaded"`

	// Skipped
	//
	// Embeddings skipped for the current model (likely due to architecture incompatibility)
	// Required: true
	Skipped map[string]EmbeddingItem `json:"skipped"`
}

// Validate validates this embeddings response
func (m *EmbeddingsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoaded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkipped(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbeddingsResponse) validateLoaded(formats strfmt.Registry) error {

	if err := validate.Required("loaded", "body", m.Loaded); err != nil {
		return err
	}

	for k := range m.Loaded {

		if err := validate.Required("loaded"+"."+k, "body", m.Loaded[k]); err != nil {
			return err
		}
		if val, ok := m.Loaded[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("loaded" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("loaded" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *EmbeddingsResponse) validateSkipped(formats strfmt.Registry) error {

	if err := validate.Required("skipped", "body", m.Skipped); err != nil {
		return err
	}

	for k := range m.Skipped {

		if err := validate.Required("skipped"+"."+k, "body", m.Skipped[k]); err != nil {
			return err
		}
		if val, ok := m.Skipped[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skipped" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("skipped" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this embeddings response based on the context it is used
func (m *EmbeddingsResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLoaded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSkipped(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmbeddingsResponse) contextValidateLoaded(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("loaded", "body", m.Loaded); err != nil {
		return err
	}

	for k := range m.Loaded {

		if val, ok := m.Loaded[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EmbeddingsResponse) contextValidateSkipped(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("skipped", "body", m.Skipped); err != nil {
		return err
	}

	for k := range m.Skipped {

		if val, ok := m.Skipped[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmbeddingsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmbeddingsResponse) UnmarshalBinary(b []byte) error {
	var res EmbeddingsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
