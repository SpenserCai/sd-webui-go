// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExtrasBatchImagesRequest ExtrasBatchImagesRequest
//
// swagger:model ExtrasBatchImagesRequest
type ExtrasBatchImagesRequest struct {

	// CodeFormer Visibility
	//
	// Sets the visibility of CodeFormer, values should be between 0 and 1.
	// Maximum: 1
	// Minimum: 0
	CodeformerVisibility *float64 `json:"codeformer_visibility,omitempty"`

	// CodeFormer Weight
	//
	// Sets the weight of CodeFormer, values should be between 0 and 1.
	// Maximum: 1
	// Minimum: 0
	CodeformerWeight *float64 `json:"codeformer_weight,omitempty"`

	// Secondary upscaler visibility
	//
	// Sets the visibility of secondary upscaler, values should be between 0 and 1.
	// Maximum: 1
	// Minimum: 0
	ExtrasUpscaler2Visibility *float64 `json:"extras_upscaler_2_visibility,omitempty"`

	// GFPGAN Visibility
	//
	// Sets the visibility of GFPGAN, values should be between 0 and 1.
	// Maximum: 1
	// Minimum: 0
	GfpganVisibility *float64 `json:"gfpgan_visibility,omitempty"`

	// Images
	//
	// List of images to work on. Must be Base64 strings
	// Required: true
	ImageList []*FileData `json:"imageList"`

	// Resize Mode
	//
	// Sets the resize mode: 0 to upscale by upscaling_resize amount, 1 to upscale up to upscaling_resize_h x upscaling_resize_w.
	// Enum: [0 1]
	ResizeMode int64 `json:"resize_mode,omitempty"`

	// Show results
	//
	// Should the backend return the generated image?
	ShowExtrasResults *bool `json:"show_extras_results,omitempty"`

	// Upscale first
	//
	// Should the upscaler run before restoring faces?
	UpscaleFirst *bool `json:"upscale_first,omitempty"`

	// Main upscaler
	//
	// The name of the main upscaler to use, it has to be one of this list:
	Upscaler1 *string `json:"upscaler_1,omitempty"`

	// Secondary upscaler
	//
	// The name of the secondary upscaler to use, it has to be one of this list:
	Upscaler2 *string `json:"upscaler_2,omitempty"`

	// Crop to fit
	//
	// Should the upscaler crop the image to fit in the chosen size?
	UpscalingCrop *bool `json:"upscaling_crop,omitempty"`

	// Upscaling Factor
	//
	// By how much to upscale the image, only used when resize_mode=0.
	// Maximum: 8
	// Minimum: 1
	UpscalingResize float64 `json:"upscaling_resize,omitempty"`

	// Target Height
	//
	// Target height for the upscaler to hit. Only used when resize_mode=1.
	// Minimum: 1
	UpscalingResizeh int64 `json:"upscaling_resize_h,omitempty"`

	// Target Width
	//
	// Target width for the upscaler to hit. Only used when resize_mode=1.
	// Minimum: 1
	UpscalingResizew int64 `json:"upscaling_resize_w,omitempty"`
}

// Validate validates this extras batch images request
func (m *ExtrasBatchImagesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodeformerVisibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodeformerWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtrasUpscaler2Visibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGfpganVisibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResizeMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpscalingResize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpscalingResizeh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpscalingResizew(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtrasBatchImagesRequest) validateCodeformerVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.CodeformerVisibility) { // not required
		return nil
	}

	if err := validate.Minimum("codeformer_visibility", "body", *m.CodeformerVisibility, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("codeformer_visibility", "body", *m.CodeformerVisibility, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateCodeformerWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.CodeformerWeight) { // not required
		return nil
	}

	if err := validate.Minimum("codeformer_weight", "body", *m.CodeformerWeight, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("codeformer_weight", "body", *m.CodeformerWeight, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateExtrasUpscaler2Visibility(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtrasUpscaler2Visibility) { // not required
		return nil
	}

	if err := validate.Minimum("extras_upscaler_2_visibility", "body", *m.ExtrasUpscaler2Visibility, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("extras_upscaler_2_visibility", "body", *m.ExtrasUpscaler2Visibility, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateGfpganVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.GfpganVisibility) { // not required
		return nil
	}

	if err := validate.Minimum("gfpgan_visibility", "body", *m.GfpganVisibility, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("gfpgan_visibility", "body", *m.GfpganVisibility, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateImageList(formats strfmt.Registry) error {

	if err := validate.Required("imageList", "body", m.ImageList); err != nil {
		return err
	}

	for i := 0; i < len(m.ImageList); i++ {
		if swag.IsZero(m.ImageList[i]) { // not required
			continue
		}

		if m.ImageList[i] != nil {
			if err := m.ImageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var extrasBatchImagesRequestTypeResizeModePropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		extrasBatchImagesRequestTypeResizeModePropEnum = append(extrasBatchImagesRequestTypeResizeModePropEnum, v)
	}
}

// prop value enum
func (m *ExtrasBatchImagesRequest) validateResizeModeEnum(path, location string, value int64) error {
	if err := validate.EnumCase(path, location, value, extrasBatchImagesRequestTypeResizeModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ExtrasBatchImagesRequest) validateResizeMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ResizeMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateResizeModeEnum("resize_mode", "body", m.ResizeMode); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateUpscalingResize(formats strfmt.Registry) error {
	if swag.IsZero(m.UpscalingResize) { // not required
		return nil
	}

	if err := validate.Minimum("upscaling_resize", "body", m.UpscalingResize, 1, false); err != nil {
		return err
	}

	if err := validate.Maximum("upscaling_resize", "body", m.UpscalingResize, 8, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateUpscalingResizeh(formats strfmt.Registry) error {
	if swag.IsZero(m.UpscalingResizeh) { // not required
		return nil
	}

	if err := validate.MinimumInt("upscaling_resize_h", "body", m.UpscalingResizeh, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ExtrasBatchImagesRequest) validateUpscalingResizew(formats strfmt.Registry) error {
	if swag.IsZero(m.UpscalingResizew) { // not required
		return nil
	}

	if err := validate.MinimumInt("upscaling_resize_w", "body", m.UpscalingResizew, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this extras batch images request based on the context it is used
func (m *ExtrasBatchImagesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExtrasBatchImagesRequest) contextValidateImageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ImageList); i++ {

		if m.ImageList[i] != nil {
			if err := m.ImageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("imageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("imageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExtrasBatchImagesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExtrasBatchImagesRequest) UnmarshalBinary(b []byte) error {
	var res ExtrasBatchImagesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
